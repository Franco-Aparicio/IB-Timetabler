@page "/lessons/{Id}"
@using System.Linq
@inject SaveBannerService SaveBannerService
@inject NavigationManager NavigationManager
@inject LessonService LessonService
@inject TeacherService TeacherService
@inject BlockService BlockService
@inject LessonIdblockIdService LessonIdblockIdService
@inject RoomIdlessonIdService RoomIdlessonIdService
@inject RoomService RoomService


<TitleComponent Page="@($"Lesson: {Lesson.Name}")"></TitleComponent>
<br/>
<NavLink class="button" href="lessons" style="text-decoration: none; margin-bottom: 15px">
    <span class="icon"><i class="sort left"></i></span>
    <span>Back to Lessons</span>
</NavLink>
<button class="button is-danger" @onclick="Delete" style="margin-left: 15px;">
    <span class="icon" style="font-size: 10px; margin-right: 7px"><i class="fas fa-trash"></i></span>
    <span>Delete Lesson</span>
</button>
<br/><br/>

<div style="overflow-x: auto">
    <table class="table is-bordered is-striped is-hoverable has-text-centered" style="width: 100%">
        <thead>
        <tr>
            @foreach (ColumnDefinition column in MainColumns) {
                <th style="cursor: auto !important;">
                    @column.Title
                </th>
            }
        </tr>
        </thead>
        <tbody>
        <tr>
            @foreach (var column in MainColumns) {
                @switch (column.Title) {
                    case "Name": {
                        <td>
                            <input class="input" value="@Lesson.Name" @oninput="HandleName" @onfocusout="SubmitName" type="text" placeholder="@Lesson.Name" style="width: 100%; min-width: 150px;"/>
                            @if (NameWarn.Length > 0 && NameWarn.Substring(0, 4) == "INFO") {
                                <span style="font-size: 12px; color: dodgerblue; display: block;">@NameWarn</span>
                            }
                            else {
                                <span style="font-size: 12px; color: red; display: block;">@NameWarn</span>
                            }
                        </td>
                        break;
                    }
                    case "Class Code": {
                        <td>
                            <input class="input" value="@Lesson.ClassCode" @oninput="HandleClassCode" @onfocusout="SubmitClassCode" type="text" placeholder="@Lesson.ClassCode" style="width: 100%; min-width: 150px;"/>
                            @if (ClassCodeWarn.Length > 0 && ClassCodeWarn.Substring(0, 4) == "INFO") {
                                <span style="font-size: 12px; color: dodgerblue; display: block;">@ClassCodeWarn</span>
                            }
                            else {
                                <span style="font-size: 12px; color: red; display: block;">@ClassCodeWarn</span>
                            }
                        </td>
                        break;
                    }
                    case "Year": {
                        <td>
                            <div class="select" style="width: 100%; min-width: 75px;">
                                <select @bind-value="@CopyLesson.Year" @bind-value:event="oninput" @onchange="SubmitYear" style="width: 100%; min-width: 75px;">
                                    <option value="12">12</option>
                                    <option value="13">13</option>
                                </select>
                            </div>
                        </td>
                        break;
                    }
                    case "Level": {
                        <td>
                            <div class="select" style="width: 100%; min-width: 75px;">
                                <select @bind-value="@CopyLesson.Level" @bind-value:event="oninput" @onchange="SubmitLevel" style="width: 100%; min-width: 75px;">
                                    <option value="SL">SL</option>
                                    <option value="HL">HL</option>
                                </select>
                            </div>
                        </td>
                        break;
                    }
                    case "Block(s)": {
                        <td style="min-width: 100px">
                            @foreach (Block b in Blocks) {
                                <label for="@($"block-{@b.BlockNum.ToString()}")" style="display: inline-block;padding-right: 5px;padding-left: 5px; cursor: pointer;">
                                    <label for="@($"block-{@b.BlockNum.ToString()}")" style="cursor: pointer;display:inline-flex;font-size:1.2rem; margin-bottom: 2px; margin-top: 2px;">@b.BlockNum.ToString()</label>
                                    <input class="checkbox" type="checkbox" @onclick="() => {HandleBlockAsync(b.Id,LessonIdblockIds.Select(x=>x.BlockId).Contains(b.Id));}"
                                           checked=@LessonIdblockIds.Select(x=>x.BlockId).Contains(b.Id)
                                           @onclick:preventDefault="true" id="@($"block-{@b.BlockNum.ToString()}")"
                                           style="align-items:center; margin-bottom: 2px; margin-top: 2px;"/>
                                </label>
                            }
                            @if (BlockWarn.Length > 0 && BlockWarn.Substring(0, 4) == "INFO") {
                                <span style="font-size: 12px; color: dodgerblue; display: block;">@BlockWarn</span>
                            }
                            else {
                                <span style="font-size: 12px; color: red; display: block;">@BlockWarn</span>
                            }
                            <NavLink class="button is-small" href="blocks" style="text-decoration: none;">
                                <span class="icon" style="font-size: 10px; margin-right: 7px"><i class="fas fa-plus"></i></span>
                                <span>Add</span>
                            </NavLink>
                        </td>
                        break;
                    }
                    case "Lessons Per Cycle": {
                        <td>
                            <input class="input" value="@Lesson.NumLessons.ToString()" @oninput="HandleNumLessons"
                                   @onfocusout="SubmitNumLessons" type="number" placeholder="@Lesson.NumLessons.ToString()" style="width: 100%; min-width: 50px;"/>
                            <span style="font-size: 12px; color: red; display: block;">@NumLessonsWarn</span>
                        </td>
                        break;
                    }
                    case "Teacher": {
                        <td>
                            <div class="select" style="width: 100%; min-width: 75px;">
                                <select @bind-value="@CopyLesson.TeacherId" @bind-value:event="oninput" @onchange="SubmitTeacher" style="width: 100%; min-width: 100px;">
                                    @foreach (var teacher in Teachers.OrderBy(x=>x.Name)) {
                                        <option value="@teacher.Id.ToString()">@teacher.Name</option>
                                    }
                                </select>
                            </div>
                            <NavLink class="button is-small" href="teachers" style="text-decoration: none; margin-top: 8px">
                                <span class="icon" style="font-size: 10px; margin-right: 7px"><i class="fas fa-plus"></i></span>
                                <span>Add</span>
                            </NavLink>
                        </td>
                        break;
                    }
                }
            }
        </tr>
        </tbody>
    </table>
</div>
<br/>

@if (true) {
    bool checkAll = Selected.Count == Rooms.Count;
    <div style="overflow-x: auto">
        <table class="table is-bordered is-striped is-hoverable has-text-centered" style="width: 50%; margin: auto">
            <thead>
            <tr>
                <th @onclick="() => HandleSelectAllRooms(checkAll)" style="width: 25px">
                    <input type="checkbox" checked=@checkAll @onclick="@(() => HandleSelectAllRooms(checkAll))" @onclick:preventDefault="true" style="cursor: pointer;"/>
                </th>
                @foreach (ColumnDefinition column in RoomColumns) {
                    <th @onclick="@(() => SortData(column))">
                        @column.Title
                        <span style="float: right" class="@(SortClass(column))"></span>
                    </th>
                }
            </tr>
            </thead>
            <tbody>
            @foreach (Room r in Rooms) {
                bool check = Selected.Contains(r.Id);
                <tr>
                    <td @onclick="() => HandleSelectedRooms(r.Id, check)" style="cursor: pointer;">
                        <input type="checkbox" checked=@check @onclick="@(() => HandleSelectedRooms(r.Id, check))" @onclick:preventDefault="true" style="cursor: pointer;"/>
                    </td>
                    @foreach (var column in RoomColumns) {
                        <td>
                            @r.GetType().GetProperty(column.Property)?.GetValue(r)
                        </td>
                    }
                </tr>
            }
            </tbody>
        </table>
    </div>
}
<br/><br/><br/><br/>
@code {

    [Parameter]
    public string Id { get; set; }
    
    Lesson Lesson = null;
    Lesson CopyLesson = null;
    List<Teacher> Teachers = null;
    List<Block> Blocks = null;
    List<LessonIdblockId> LessonIdblockIds = null;
    List<RoomIdlessonId> RoomIdlessonIds = null;
    List<Room> Rooms = null;
    List<ColumnDefinition> MainColumns = null;
    List<ColumnDefinition> RoomColumns = null;
    List<long> Selected = null;
    string NameWarn;
    string ClassCodeWarn;
    string BlockWarn;
    string NumLessonsWarn;

    protected override async void OnInitialized() {
        await base.OnInitializedAsync();
        MainColumns = new List<ColumnDefinition> {
            new ColumnDefinition {Property = "Name", Title = "Name"},
            new ColumnDefinition {Property = "ClassCode", Title = "Class Code"},
            new ColumnDefinition {Property = "Year", Title = "Year"},
            new ColumnDefinition {Property = "Level", Title = "Level"},
            new ColumnDefinition {Property = "Block", Title = "Block(s)"},
            new ColumnDefinition {Property = "NumLessons", Title = "Lessons Per Cycle"},
            new ColumnDefinition {Property = "TeacherId", Title = "Teacher"}
        };
        Lesson = await LessonService.GetLessonAsync(int.Parse(Id));
        Teachers = await TeacherService.GetAllTeachersAsync();
        Blocks = await BlockService.GetAllBlocksAsync();
        await RefreshLessonIdblockIds();
        await RefreshRoomIdlessonIds();
        Rooms = await RoomService.GetAllRoomsAsync();
        CopyLesson = new Lesson {Id = Lesson.Id, ClassCode = Lesson.ClassCode, Level = Lesson.Level,
            Name = Lesson.Name, NumLessons = Lesson.NumLessons, TeacherId = Lesson.TeacherId, Year = Lesson.Year};
        NameWarn = "";
        ClassCodeWarn = "";
        BlockWarn = "";
        NumLessonsWarn = "";
        RoomColumns = new List<ColumnDefinition> {
            new ColumnDefinition {Property = "Number", Title = "Room Number"},
            new ColumnDefinition {Property = "Floor", Title = "Floor", SortDirection = SortDirection.Ascending}
        };
        Selected = Rooms.Where(x=>RoomIdlessonIds.Select(y=>y.RoomId).Contains(x.Id))
            .Select(x=>x.Id).ToList();
        SortData();
    }

    private async Task RefreshLessonIdblockIds() {
        LessonIdblockIds = LessonIdblockIdService.GetAllLessonIdblockIdsAsync().Result
            .Where(x=>x.LessonId == Lesson.Id).ToList();
    }

    private async Task RefreshRoomIdlessonIds() {
        RoomIdlessonIds = RoomIdlessonIdService.GetAllRoomIdlessonIdsAsync().Result
            .Where(x=>x.LessonId == Lesson.Id).ToList();
    }
    
    private void HandleName(ChangeEventArgs args) {
        if (args.Value.ToString().Trim().Length == 0) {
            NameWarn = "The lesson must have a name!";
            CopyLesson.Name = Lesson.Name;
            return;
        }
        CopyLesson.Name = args.Value.ToString();
        NameWarn = "";
        if (LessonService.GetAllLessonsAsync().Result.Any(x =>
            x.Id != CopyLesson.Id && x.Name == CopyLesson.Name))
            NameWarn = "INFO: This name is already in use";
    }

    private async void SubmitName() {
        bool saved = Lesson.Name != CopyLesson.Name;
        Lesson.Name = CopyLesson.Name;
        await LessonService.UpdateLessonAsync(Lesson);
        if (saved) SaveBannerService.ShowBanner(
            "Lesson name updated successfully", SaveBannerType.Success);
    }
    
    private void HandleClassCode(ChangeEventArgs args) {
        if (args.Value.ToString().Trim().Length == 0) {
            ClassCodeWarn = "The lesson must have a class code!";
            CopyLesson.ClassCode = Lesson.ClassCode;
            return;
        }
        CopyLesson.ClassCode = args.Value.ToString();
        ClassCodeWarn = "";
        if (LessonService.GetAllLessonsAsync().Result.Any(x =>
            x.Id != CopyLesson.Id && x.ClassCode == CopyLesson.ClassCode))
            ClassCodeWarn = "INFO: This code is already in use";
    }

    private async void SubmitClassCode() {
        bool saved = Lesson.ClassCode != CopyLesson.ClassCode;
        Lesson.ClassCode = CopyLesson.ClassCode;
        await LessonService.UpdateLessonAsync(Lesson);
        if (saved) SaveBannerService.ShowBanner(
            "Class code updated successfully", SaveBannerType.Success);
    }

    private async void SubmitYear() {
        bool saved = Lesson.Year != CopyLesson.Year;
        Lesson.Year = CopyLesson.Year;
        await LessonService.UpdateLessonAsync(Lesson);
        if (saved) SaveBannerService.ShowBanner(
            "Year group updated successfully", SaveBannerType.Success);
    }

    private async void SubmitLevel() {
        bool saved = Lesson.Level != CopyLesson.Level;
        Lesson.Level = CopyLesson.Level;
        await LessonService.UpdateLessonAsync(Lesson);
        if (saved) SaveBannerService.ShowBanner(
            "Lesson level updated successfully", SaveBannerType.Success);
    }
    
    private async void HandleBlockAsync(long id, bool value) {
        if (LessonIdblockIds.Count == 1 && value) {
            BlockWarn = "There must be at least one block selected!";
            StateHasChanged();
            return;
        }
        BlockWarn = "";
        if (!value) await LessonIdblockIdService.InsertLessonIdblockIdAsync(
            new LessonIdblockId { BlockId = id, LessonId = Lesson.Id });
        else await LessonIdblockIdService.DeleteLessonIdblockIdsAsync(
            LessonIdblockIds.FindAll(x=>x.BlockId == id));
        await RefreshLessonIdblockIds();
        if (LessonIdblockIds.Count > 1 && !value)
            BlockWarn = "INFO: This is normally only for lessons such as BTEC and PPS";
        SaveBannerService.ShowBanner("Lesson blocks updated successfully", SaveBannerType.Success);
    }

    private void HandleNumLessons(ChangeEventArgs args) {
        if (args.Value.ToString().Trim().Length == 0 || long.Parse(args.Value.ToString()) <= 0) {
            NumLessonsWarn = "There must be at least one lesson per cycle!";
            CopyLesson.NumLessons = Lesson.NumLessons;
            return;
        }
        CopyLesson.NumLessons = long.Parse(args.Value.ToString());
        NumLessonsWarn = "";
    }

    private async void SubmitNumLessons() {
        bool saved = Lesson.NumLessons != CopyLesson.NumLessons;
        Lesson.NumLessons = CopyLesson.NumLessons;
        await LessonService.UpdateLessonAsync(Lesson);
        if (saved) SaveBannerService.ShowBanner(
            "Lessons per cycle updated successfully", SaveBannerType.Success);
    }
    
    private async void SubmitTeacher() {
        bool saved = Lesson.TeacherId != CopyLesson.TeacherId;
        Lesson.TeacherId = CopyLesson.TeacherId;
        await LessonService.UpdateLessonAsync(Lesson);
        if (saved) SaveBannerService.ShowBanner(
            "Teacher updated successfully", SaveBannerType.Success);
    }

    private async void HandleSelectedRooms(long id, bool checkedValue) {
        if (!checkedValue) {
            if (Selected.Contains(id)) return;
            Selected.Add(id);
            await RoomIdlessonIdService.InsertRoomIdlessonIdAsync(new RoomIdlessonId {
                RoomId = id, LessonId = Lesson.Id});
        }
        else {
            if (!Selected.Contains(id)) return;
            if (Selected.Count == 1) {
                SaveBannerService.ShowBanner("There must be at least one available room selected",
                    SaveBannerType.Warning);
                return;
            }
            Selected.Remove(id);
            await RoomIdlessonIdService.DeleteRoomIdlessonIdsAsync(RoomIdlessonIds
                .FindAll(x=>x.RoomId == id));
        }
        await RefreshRoomIdlessonIds();
        StateHasChanged();
        SaveBannerService.ShowBanner("Available rooms updated successfully", SaveBannerType.Success);
    }

    private async void HandleSelectAllRooms(bool checkAll) {
        if (checkAll) {
            SaveBannerService.ShowBanner("Cannot deselect all! There must be at least one available room selected",
                SaveBannerType.Warning);
            return;
        }
        foreach (Room r in Rooms) {
            if (Selected.Contains(r.Id)) continue;
            Selected.Add(r.Id);
            await RoomIdlessonIdService.InsertRoomIdlessonIdAsync(new RoomIdlessonId {
                RoomId = r.Id, LessonId = Lesson.Id});
        }
        await RefreshRoomIdlessonIds();
        StateHasChanged();
        SaveBannerService.ShowBanner("Available rooms updated successfully", SaveBannerType.Success);
    }
    
    private async void Delete() {
        string message = $"Are you sure you want to delete {Lesson.Name}?";
        var options = new MessageBoxOptions(message) {
            Title = "Confirm Action",
            Buttons = new []{"Confirm", "Cancel"}
        };
        var choice = await Electron.Dialog.ShowMessageBoxAsync(Electron.WindowManager.BrowserWindows.First(), options);
        if (choice.Response == 1) return;
        await LessonService.DeleteLessonAsync(Lesson);
        await LessonIdblockIdService.DeleteLessonIdblockIdsAsync(LessonIdblockIds);
        await RoomIdlessonIdService.DeleteRoomIdlessonIdsAsync(RoomIdlessonIds);
        SaveBannerService.ShowBanner("Lesson deleted successfully", SaveBannerType.Success);
        NavigationManager.NavigateTo("lessons");
    }
    
    private string SortClass(ColumnDefinition column) {
        return column.SortDirection != SortDirection.NotSet ? $"sort {column.SortDirection.ToString().ToLower()}" : "no-sort";
    }
    
    private void SortData(ColumnDefinition sortByColumn = null) {
        bool initial = sortByColumn is null;
        if (sortByColumn is null) {
            sortByColumn = RoomColumns.FirstOrDefault(x => x.SortDirection != SortDirection.NotSet);
            if (sortByColumn is null) return;
        }
        foreach (ColumnDefinition column in RoomColumns) {
            if (column.Property != sortByColumn.Property) column.SortDirection = SortDirection.NotSet;
        }
        if (!initial)
            switch (sortByColumn.SortDirection) {
                case SortDirection.NotSet:
                    sortByColumn.SortDirection = SortDirection.Ascending;
                    break;
                case SortDirection.Ascending:
                    sortByColumn.SortDirection = SortDirection.Descending;
                    break;
                case SortDirection.Descending:
                    sortByColumn.SortDirection = SortDirection.Ascending;
                    break;
                default:
                    sortByColumn.SortDirection = SortDirection.Ascending;
                    break;
            }
        switch (sortByColumn.Property) {
            case "Floor": {
                Rooms.Sort((x, y) => {
                    int first = x.Floor.CompareTo(y.Floor);
                    return first != 0 ? first : x.Number.CompareTo(y.Number);
                });
                if (sortByColumn.SortDirection == SortDirection.Descending) {
                    Rooms.Sort((x, y) => {
                        int first = y.Floor.CompareTo(x.Floor);
                        return first != 0 ? first : x.Number.CompareTo(y.Number);
                    });
                }
                break;
            }
            case "Number": {
                Rooms.Sort((x, y) => x.Number.CompareTo(y.Number));
                if (sortByColumn.SortDirection == SortDirection.Descending) {
                    Rooms.Sort((x, y) => y.Number.CompareTo(x.Number));
                }
                break;
            }
        }
    }
}
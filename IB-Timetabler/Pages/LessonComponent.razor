@page "/lessons/{Id}"
@using System.Linq
@inject SaveBannerService SaveBannerService
@inject NavigationManager NavigationManager
@inject LessonService LessonService
@inject TeacherService TeacherService
@inject BlockService BlockService
@inject LessonIdblockIdService LessonIdblockIdService
@inject RoomIdlessonIdService RoomIdlessonIdService


<TitleComponent Page="@($"Lesson: {Lesson.Name}")"></TitleComponent>
<br/>
<NavLink class="button" href="lessons" style="text-decoration: none; margin-bottom: 15px">
    <span class="icon"><i class="sort left"></i></span>
    <span>Back to Lessons</span>
</NavLink>
<button class="button is-danger" @onclick="Delete" style="margin-left: 15px;">
    Delete Lesson
</button>
<br/><br/>

<div style="overflow-x: auto">
    <table class="table is-bordered is-striped is-hoverable has-text-centered" style="width: 100%">
        <thead>
        <tr>
            @foreach (ColumnDefinition column in Columns) {
                <th style="cursor: auto !important;">
                    @column.Title
                </th>
            }
        </tr>
        </thead>
        <tbody>
        <tr>
            @foreach (var column in Columns) {
                @switch (column.Title) {
                    case "Name": {
                        <td>
                            <input class="input" value="@Lesson.Name" @oninput="HandleName" @onfocusout="SubmitName" type="text" placeholder="@Lesson.Name" style="width: 100%; min-width: 150px;"/>
                            @if (NameWarn.Length > 0 && NameWarn.Substring(0, 4) == "INFO") {
                                <span style="font-size: 12px; color: dodgerblue; display: block;">@NameWarn</span>
                            }
                            else {
                                <span style="font-size: 12px; color: red; display: block;">@NameWarn</span>
                            }
                        </td>
                        break;
                    }
                    case "Year": {
                        <td>
                            <div class="select" style="width: 100%; min-width: 75px;">
                                <select @bind-value="@CopyLesson.Year" @bind-value:event="oninput" style="width: 100%; min-width: 75px;">
                                    <option value="12">12</option>
                                    <option value="13">13</option>
                                </select>
                            </div>
                        </td>
                        break;
                    }
                    case "Level": {
                        <td>
                            <div class="select" style="width: 100%; min-width: 75px;">
                                <select @bind-value="@CopyLesson.Level" @bind-value:event="oninput" style="width: 100%; min-width: 75px;">
                                    <option value="SL">SL</option>
                                    <option value="HL">HL</option>
                                </select>
                            </div>
                        </td>
                        break;
                    }
                    case "Block(s)": {
                        <td>
                            @foreach (Block b in Blocks) {
                                <label for="@($"block-{@b.BlockNum.ToString()}")" style="display: inline-block;padding-right: 5px;padding-left: 5px; cursor: pointer;">
                                    <label for="@($"block-{@b.BlockNum.ToString()}")" style="cursor: pointer;display:inline-flex;font-size:1.2rem; margin-bottom: 2px; margin-top: 2px;">@b.BlockNum.ToString()</label>
                                    <input class="checkbox" type="checkbox" @oninput="eventArgs => {HandleBlockAsync(b.Id, eventArgs.Value?.ToString());}" checked=@LessonIdblockIds.Select(x=>x.BlockId).Contains(b.Id) id="@($"block-{@b.BlockNum.ToString()}")" style="align-items:center; margin-bottom: 2px; margin-top: 2px;"/>
                                </label>
                            }
                            @if (BlockWarn.Length > 0 && BlockWarn.Substring(0, 4) == "INFO") {
                                <span style="font-size: 12px; color: dodgerblue; display: block;">@BlockWarn</span>
                            }
                            else {
                                <span style="font-size: 12px; color: red; display: block;">@BlockWarn</span>
                            }
                            <NavLink class="button is-small" href="blocks" style="text-decoration: none;">
                                <span class="icon" style="font-size: 10px; margin-right: 7px"><i class="fas fa-plus"></i></span>
                                <span>Add</span>
                            </NavLink>
                        </td>
                        break;
                    }
                    case "Lessons Per Cycle": {
                        <td>
                            @CopyLesson.NumLessons.ToString()
                        </td>
                        break;
                    }
                    case "Teacher": {
                        <td>
                            @Teachers.Find(x => x.Id == Lesson.TeacherId).Name
                        </td>
                        break;
                    }
                }
            }
        </tr>
        </tbody>
    </table>
    <table class="table is-bordered is-striped is-hoverable has-text-centered" style="width: 100%">
        <thead>
        <tr>
            @foreach (ColumnDefinition column in Columns) {
                <th style="cursor: auto !important;">
                    @column.Title
                </th>
            }
        </tr>
        </thead>
        <tbody>
        <tr>
            @foreach (var column in Columns) {
                @switch (column.Title) {
                    case "Name": {
                        <td>
                            @CopyLesson.Name
                        </td>
                        break;
                    }
                    case "Year": {
                        <td>
                            @CopyLesson.Year.ToString()
                        </td>
                        break;
                    }
                    case "Level": {
                        <td>
                            @CopyLesson.Level
                        </td>
                        break;
                    }
                    case "Block(s)": {
                        <td>
                            @string.Join(", ", LessonIdblockIds.Select(x =>
                                Blocks.Find(y => y.Id == x.BlockId).BlockNum).OrderBy(x => x))
                        </td>
                        break;
                    }
                    case "Lessons Per Cycle": {
                        <td>
                            @CopyLesson.NumLessons.ToString()
                        </td>
                        break;
                    }
                    case "Teacher": {
                        <td>
                            @Teachers.Find(x => x.Id == CopyLesson.TeacherId).Name
                        </td>
                        break;
                    }
                }
            }
        </tr>
        </tbody>
    </table>
</div>
<br/><br/>
@* <InputComponent Label="Name:"> *@
@*     <Control> *@
@*         <input class="input" @bind-value="@lesson.Name" @bind-value:event="onsubmit" type="text" placeholder="@placeholderLesson.Name" id="Name:" style="width: 100%; min-width: 150px; max-width: 400px"/> *@
@*     </Control> *@
@* </InputComponent> *@
@* <InputComponent Label="Year:"> *@
@*     <Control> *@
          @* <select class="select" @bind-value="@lesson.Year" @bind-value:event="onsubmit" id="Year:" style="width: 100%; min-width: 150px; max-width: 400px"> *@
          @*     <option value="12">12</option> *@
          @*     <option value="13">13</option> *@
          @* </select> *@
@*     </Control> *@
@* </InputComponent> *@
@* <InputComponent Label="Lessons Per Cycle:"> *@
@*     <Control> *@
@*         <input class="input" @bind-value="@lesson.NumLessons" @bind-value:event="onsubmit" type="number" placeholder="@placeholderLesson.NumLessons.ToString()" id="Lessons Per Cycle:" style="width: 100%; min-width: 150px; max-width: 400px"/> *@
@*     </Control> *@
@* </InputComponent> *@
@* <InputComponent Label="Teacher:"> *@
@*     <Control> *@
@*         <input class="input" @bind-value="@lesson.Teacher" @bind-value:event="onsubmit" type="text" placeholder="@placeholderLesson.Teacher" id="Teacher:" style="width: 100%; min-width: 150px; max-width: 400px"/> *@
@*     </Control> *@
@* </InputComponent> *@
@* <InputComponent Label="Blocks:"> *@
@*     <Control> *@
@*          @for (int b = 1; b <= 6; b++) { *@
@*              <label style="align-items:center;border:1px solid transparent;border-radius:4px;box-shadow:none;display:inline-flex;font-size:1.2rem;height:1.8em;justify-content:flex-start;line-height:1.5;padding: calc(.5em - 1px) calc(.5em - 1px);position:relative;vertical-align:top">@b.ToString() *@
@*                  @if (placeholderLesson.Blocks.Contains(b)) { *@
@*                      <input type="checkbox" class="checkbox" style="margin-left: 5px;align-items:center;border:1px solid transparent;border-radius:4px;box-shadow:none;display:inline-flex;height:1.8em;justify-content:flex-start;line-height:1.5;padding: calc(.5em - 1px) calc(.5em - 1px);position:relative;vertical-align:top" value="@b.ToString()" checked> *@
@*                  } *@
@*                  else { *@
@*                     <input type="checkbox" class="checkbox" style="margin-left: 5px;align-items:center;border:1px solid transparent;border-radius:4px;box-shadow:none;display:inline-flex;height:1.8em;justify-content:flex-start;line-height:1.5;padding: calc(.5em - 1px) calc(.5em - 1px);position:relative;vertical-align:top" value="@b.ToString()"> *@
@*                 } *@
@*                 </label> *@
@*          } *@
@*     </Control> *@
@* </InputComponent> *@
@* align-items:center;border:1px solid transparent;border-radius:4px;box-shadow:none;display:inline-flex;font-size:1rem;height:2.5em;justify-content:flex-start;line-height:1.5;padding-bottom:calc(.5em - 1px);padding-left:calc(.75em - 1px);padding-right:calc(.75em - 1px);padding-top:calc(.5em - 1px);position:relative;vertical-align:top *@
@* <InputComponent Label="Level:"> *@
@*     <Control> *@
@*         <select class="select" @bind-value="@lesson.Level" @bind-value:event="onsubmit" id="Level:" style="width: 100%; min-width: 150px; max-width: 400px"> *@
@*             <option value="SL">SL</option> *@
@*             <option value="HL">HL</option> *@
@*         </select> *@
@*     </Control> *@
@* </InputComponent> *@

@* <InputComponent Label="Available Rooms:"> *@
@*     <Control> *@
@*          <select multiple class="select is-multiple" @bind-value="@lesson.Level" @bind-value:event="onsubmit" id="Available Rooms:" style="width: 100%; min-width: 150px; max-width: 400px"> *@
@*              @foreach (string room in rooms.Where(x=>lesson.Rooms.All(y=>x != y))) { *@
@*                  <option value=@room>@room</option> *@
@*              } *@
@*          </select> *@
@*     </Control> *@
@* </InputComponent> *@
@* <InputComponent Label="Selected Rooms:"> *@
@*     <Control> *@
@*          <select multiple class="select is-multiple" @bind-value="@lesson.Level" @bind-value:event="onsubmit" id="Selected Rooms:" style="width: 100%; min-width: 150px; max-width: 400px"> *@
@*              @foreach (string room in lesson.Rooms) { *@
@*                  <option value=@room>@room</option> *@
@*              } *@
@*          </select> *@
@*     </Control> *@
@* </InputComponent> *@

@* <div style="overflow-x: auto"> *@
@*     <table class="table is-bordered is-striped is-hoverable" style="width: 49%; display: inline-table"> *@
@*         <thead> *@
@*         <tr class="has-text-centered"> *@
@*             <th>Available Rooms</th> *@
@*         </tr> *@
@*         </thead> *@
@*         <tbody> *@
@*         @foreach (string room in rooms.Where(x=>lesson.Rooms.All(y=> x != y))) { *@
@*             <tr class="has-text-centered"> *@
@*                 <td class="has-text-centered">@room</td> *@
@*             </tr> *@
@*         } *@
@*         </tbody> *@
@*     </table> *@
@*     <table class="table is-bordered is-striped is-hoverable" style="width: 49%; display: inline-table"> *@
@*         <thead> *@
@*             <tr class="has-text-centered"> *@
@*                 <th>Selected Rooms</th> *@
@*             </tr> *@
@*         </thead> *@
@*         <tbody> *@
@*             @foreach (string room in lesson.Rooms) { *@
@*                 <tr class="has-text-centered"> *@
@*                     <td class="has-text-centered">@room</td> *@
@*                 </tr> *@
@*             } *@
@*         </tbody> *@
@*     </table> *@
@* </div> *@

<br/><br/>
@code {

    [Parameter]
    public string Id { get; set; }
    
    Lesson Lesson = null;
    Lesson CopyLesson = null;
    List<Teacher> Teachers = null;
    List<Block> Blocks = null;
    List<LessonIdblockId> LessonIdblockIds = null;
    List<RoomIdlessonId> RoomIdlessonIds = null;
    List<ColumnDefinition> Columns = null;
    string NameWarn;
    string BlockWarn;

    protected override async void OnInitialized() {
        await base.OnInitializedAsync();
        Columns = new List<ColumnDefinition> {
            new ColumnDefinition {Property = "Name", Title = "Name", SortDirection = SortDirection.Descending},
            new ColumnDefinition {Property = "Year", Title = "Year"},
            new ColumnDefinition {Property = "Level", Title = "Level"},
            new ColumnDefinition {Property = "Block", Title = "Block(s)"},
            new ColumnDefinition {Property = "NumLessons", Title = "Lessons Per Cycle"},
            new ColumnDefinition {Property = "TeacherId", Title = "Teacher"}
        };
        Lesson = await LessonService.GetLessonAsync(int.Parse(Id));
        Teachers = await TeacherService.GetAllTeachersAsync();
        Blocks = await BlockService.GetAllBlocksAsync();
        LessonIdblockIds = LessonIdblockIdService.GetAllLessonIdblockIdsAsync().Result.Where(x=>x.LessonId == Lesson.Id).ToList();
        RoomIdlessonIds = await RoomIdlessonIdService.GetAllRoomIdlessonIdsAsync();
        CopyLesson = new Lesson {Id = Lesson.Id, ClassCode = Lesson.ClassCode, Level = Lesson.Level,
            Name = Lesson.Name, NumLessons = Lesson.NumLessons, TeacherId = Lesson.TeacherId, Year = Lesson.Year};
        NameWarn = "";
        BlockWarn = "";
    }

    private void HandleName(ChangeEventArgs args) {
        if (args.Value.ToString().Trim().Length == 0) {
            NameWarn = "The lesson must have a name!";
            CopyLesson.Name = Lesson.Name;
            return;
        }
        CopyLesson.Name = args.Value.ToString();
        NameWarn = "";
        if (LessonService.GetAllLessonsAsync().Result.Any(x =>
            x.Id != CopyLesson.Id && x.Name == CopyLesson.Name))
            NameWarn = "INFO: This name is already in use";
    }

    private async void SubmitName() {
        bool saved = Lesson.Name != CopyLesson.Name;
        Lesson.Name = CopyLesson.Name;
        await LessonService.UpdateLessonAsync(Lesson);
        if (saved) SaveBannerService.ShowBanner(
            "Lesson name updated successfully", SaveBannerType.Success);
    }

    private async void HandleBlockAsync(long id, string value) {
        Console.WriteLine(id.ToString());
        Console.WriteLine(value);
        
    }
    
    private async void Delete() {
        string message = $"Are you sure you want to delete {Lesson.Name}?";
        var options = new MessageBoxOptions(message) {
            Title = "Confirm Action",
            Buttons = new []{"Confirm", "Cancel"}
        };
        var choice = await Electron.Dialog.ShowMessageBoxAsync(options);
        if (choice.Response == 1) return;
        await LessonService.DeleteLessonAsync(Lesson);
        await LessonIdblockIdService.DeleteLessonIdblockIdsAsync(LessonIdblockIds);
        await RoomIdlessonIdService.DeleteRoomIdlessonIdsAsync(RoomIdlessonIds.Where(x=>x.LessonId == Lesson.Id));
        NavigationManager.NavigateTo("lessons");
    }
}
@page "/lessons/addlesson"
@using System.Linq
@inject SaveBannerService SaveBannerService
@inject NavigationManager NavigationManager
@inject LessonService LessonService
@inject TeacherService TeacherService
@inject BlockService BlockService
@inject LessonIdblockIdService LessonIdblockIdService
@inject RoomIdlessonIdService RoomIdlessonIdService
@inject RoomService RoomService


<TitleComponent Page="Add Lesson"/>
<br/>
@* Button to cancel adding a Lesson and return to the lessons page *@ 
<NavLink class="button is-danger is-outlined" href="lessons" style="text-decoration: none; margin-bottom: 15px">
    <span class="icon"><i class="fas fa-ban"></i></span>
    <span>Cancel</span>
</NavLink>
@* Button to add Lesson after filling out Lesson details *@ 
<button class="button is-success" @onclick="Save" style="margin-left: 15px;">
    <span class="icon"><i class="fas fa-check"></i></span>
    <span>Add Lesson</span>
</button>
<br/><br/>

<div style="overflow-x: auto">
    <table class="table is-bordered is-striped is-hoverable has-text-centered" style="width: 100%">
        <thead>
        <tr>
            @foreach (string title in MainColumns) {
                <th style="cursor: auto !important;">
                    @title
                </th>
            }
        </tr>
        </thead>
        <tbody>
        <tr>
            @* Cell with input box for the new Lesson name with custom event handler and live warning/error message *@ 
            <td>
                <input class="input" @oninput="HandleName" type="text" placeholder="Lesson Name"
                       style="width: 100%; min-width: 150px;"/>
                @if (NameWarn.Length > 0 && NameWarn[..4] == "INFO") {
                    <span style="font-size: 12px; color: dodgerblue; display: block;">@NameWarn</span>
                }
                else {
                    <span style="font-size: 12px; color: red; display: block;">@NameWarn</span>
                }
            </td>
            @* Cell with input box for the new Lesson class code with custom event handler and live warning/error message *@ 
            <td>
                <input class="input" @oninput="HandleClassCode" type="text" placeholder="Class Code"
                       style="width: 100%; min-width: 150px;"/>
                @if (ClassCodeWarn.Length > 0 && ClassCodeWarn[..4] == "INFO") {
                    <span style="font-size: 12px; color: dodgerblue; display: block;">@ClassCodeWarn</span>
                }
                else {
                    <span style="font-size: 12px; color: red; display: block;">@ClassCodeWarn</span>
                }
            </td>
            @* Cell with dropdown menu for the new Lesson year group with data binding *@ 
            <td>
                <div class="select" style="width: 100%; min-width: 75px;">
                    <select @bind-value="@Lesson.Year" @bind-value:event="onchange" style="width: 100%; min-width: 75px;">
                        <option value="12">12</option>
                        <option value="13">13</option>
                    </select>
                </div>
            </td>
            @* Cell with dropdown menu for the new Lesson level with data binding *@ 
            <td>
                <div class="select" style="width: 100%; min-width: 75px;">
                    <select @bind-value="@Lesson.Level" @bind-value:event="onchange" style="width: 100%; min-width: 75px;">
                        <option value="SL">SL</option>
                        <option value="HL">HL</option>
                    </select>
                </div>
            </td>
            @* Cell with multiple selection boxes to select the blocks that the Lesson belongs in with custom event handling *@ 
            <td style="min-width: 100px">
                @foreach (Block b in Blocks) {
                    <label for="@($"block-{@b.BlockNum.ToString()}")"
                           style="display: inline-block;padding-right: 5px;padding-left: 5px; cursor: pointer;">
                        <label for="@($"block-{@b.BlockNum.ToString()}")"
                               style="cursor:pointer;display:inline-flex;font-size:1.2rem; margin-bottom: 2px; margin-top: 2px;">
                            @b.BlockNum.ToString()
                        </label>
                        <input class="checkbox" type="checkbox" 
                               @onclick=
                               "() => {HandleBlock(b.Id, LessonIdblockIds.Select(x=>x.BlockId)
                                            .Contains(b.Id));}"
                               checked="@(LessonIdblockIds.Select(x=>x.BlockId).Contains(b.Id) ? "true" : null)"
                               @onclick:preventDefault="true" id="@($"block-{@b.BlockNum.ToString()}")"
                               style="align-items:center; margin-bottom: 2px; margin-top: 2px;"/>
                    </label>
                }
                @if (BlockWarn.Length > 0 && BlockWarn[..4] == "INFO") {
                    <span style="font-size: 12px; color: dodgerblue; display: block;">@BlockWarn</span>
                }
                else {
                    <span style="font-size: 12px; color: red; display: block;">@BlockWarn</span>
                }
                @* Button to navigate to the blocks page *@ 
                <NavLink class="button is-small" href="blocks" style="text-decoration: none;">
                    <span class="icon" style="font-size: 10px; margin-right: 7px"><i class="fas fa-plus"></i></span>
                    <span>Add</span>
                </NavLink>
            </td>
            @* Cell with numerical spinner to input the number of lessons of the new Lessons with custom event handling *@ 
            <td>
                <input class="input" @oninput="HandleNumLessons" type="number" placeholder="Lessons Per Cycle"
                       style="width: 100%; min-width: 50px;"/>
                <span style="font-size: 12px; color: red; display: block;">@NumLessonsWarn</span>
            </td>
            @* Cell with dropdown menu to select the teacher for the new Lesson *@ 
            <td>
                <div class="select" style="width: 100%; min-width: 75px;">
                    <select @bind-value="@Lesson.TeacherId" @bind-value:event="oninput" style="width: 100%; min-width: 100px;">
                        @foreach (var teacher in Teachers.OrderBy(x=>x.Name)) {
                            <option value="@teacher.Id.ToString()">@teacher.Name</option>
                        }
                    </select>
                </div>
                @* Button to navigate to the teachers page *@ 
                <NavLink class="button is-small" href="teachers" style="text-decoration: none; margin-top: 8px">
                    <span class="icon" style="font-size: 10px; margin-right: 7px"><i class="fas fa-plus"></i></span>
                    <span>Add</span>
                </NavLink>
            </td>
        </tr>
        </tbody>
    </table>
</div>
<br/>

@if (true) {
    @* Table to select which rooms the given room may be taught in *@ 
    bool checkAll = Selected.Count == Rooms.Count;
    <div style="overflow-x: auto">
        <table class="table is-bordered is-striped is-hoverable has-text-centered" style="width: 50%; margin: auto">
            <thead>
            <tr>
                @* Custom event handling for selecting all rooms *@ 
                <th @onclick="() => HandleSelectAllRooms(checkAll)" style="width: 25px">
                    <input type="checkbox" checked="@(checkAll ? "true" : null)" @onclick="@(() => HandleSelectAllRooms(checkAll))"
                           @onclick:preventDefault="true" style="cursor: pointer;"/>
                </th>
                @* Custom event handling for clicking on a room column header *@ 
                @foreach (ColumnDefinition column in RoomColumns) {
                    <th @onclick="@(() => SortData(column))">
                        @column.Title
                        <span style="float: right" class="@(SortClass(column))"></span>
                    </th>
                }
            </tr>
            </thead>
            <tbody>
            @foreach (Room r in Rooms) {
                bool check = Selected.Contains(r.Id);
                <tr>
                    @* Custom event handling for selecting a room for the new Lesson *@ 
                    <td @onclick="() => HandleSelectedRooms(r.Id, check)" style="cursor: pointer;">
                        <input type="checkbox" checked="@(check ? "true" : null)" @onchange="@(() => HandleSelectedRooms(r.Id, check))"
                               @onclick:preventDefault="true" style="cursor: pointer;"/>
                    </td>
                    @* Get the values of each property of Room r (as defined in RoomColumns) *@ 
                    @foreach (var column in RoomColumns) {
                        <td>
                            @r.GetType().GetProperty(column.Property)?.GetValue(r)
                        </td>
                    }
                </tr>
            }
            </tbody>
        </table>
    </div>
}
<br/><br/><br/><br/>

@code {
    
    Lesson Lesson = null;
    List<Teacher> Teachers = null;
    List<Block> Blocks = null;
    List<LessonIdblockId> LessonIdblockIds = null;
    List<RoomIdlessonId> RoomIdlessonIds = null;
    List<Room> Rooms = null;
    List<string> MainColumns = null;
    List<ColumnDefinition> RoomColumns = null;
    List<long> Selected = null;
    string NameWarn;
    string ClassCodeWarn;
    string BlockWarn;
    string NumLessonsWarn;

    /// Initializes properties once the page is ready to start 
    protected override async void OnInitialized() {
        await base.OnInitializedAsync();
        MainColumns = new List<string> { "Name", "Class Code", "Year", "Level", "Block(s)", "Lessons Per Cycle", "Teacher"};
        Teachers = await TeacherService.GetAllTeachersAsync();
        Lesson = new Lesson {Id = await LessonService.GetNextId(), Name = "", ClassCode = "",
            Year = 12, Level = "SL", NumLessons = 0, TeacherId = Teachers.OrderBy(x=>x.Name).First().Id};
        Blocks = await BlockService.GetAllBlocksAsync();
        Rooms = await RoomService.GetAllRoomsAsync();
        LessonIdblockIds = new List<LessonIdblockId>();
        RoomIdlessonIds = new List<RoomIdlessonId>();
        NameWarn = "";
        ClassCodeWarn = "";
        BlockWarn = "";
        NumLessonsWarn = "";
        RoomColumns = new List<ColumnDefinition> {
            new ColumnDefinition {Property = "Number", Title = "Room Number"},
            new ColumnDefinition {Property = "Floor", Title = "Floor", SortDirection = SortDirection.Ascending}
        };
        Selected = new List<long>();
        SortData();
    }
    
    /// Custom event handler for the new name field to determine the warning message 
    private void HandleName(ChangeEventArgs args) {
        Lesson.Name = args.Value?.ToString()?.Trim();
        if (Lesson.Name?.Length == 0) {
            NameWarn = "The lesson must have a name!";
            return;
        }
        NameWarn = "";
        if (LessonService.GetAllLessonsAsync().Result.Any(x =>
            x.Id != Lesson.Id && x.Name == Lesson.Name))
            NameWarn = "INFO: This name is already in use";
    }

    /// Custom event handler for the new class code field to determine the warning message 
    private void HandleClassCode(ChangeEventArgs args) {
        Lesson.ClassCode = args.Value?.ToString()?.Trim();
        if (Lesson.ClassCode?.Trim().Length == 0) {
            ClassCodeWarn = "The lesson must have a class code!";
            return;
        }
        ClassCodeWarn = "";
        if (LessonService.GetAllLessonsAsync().Result.Any(x =>
            x.Id != Lesson.Id && x.ClassCode == Lesson.ClassCode))
            ClassCodeWarn = "INFO: This code is already in use";
    }
    
    /// Custom event handler for the new blocks field 
    private void HandleBlock(long id, bool value) {
        if (LessonIdblockIds.Count == 1 && value) {
            BlockWarn = "There must be at least one block selected!";
            StateHasChanged();
            return;
        }
        BlockWarn = "";
        // If the box was initially unchecked (user clicked to check it), add to LessonIdblockIds 
        if (!value)
            LessonIdblockIds.Add(new LessonIdblockId {BlockId = id, LessonId = Lesson.Id});
        // Otherwise, remove it from LessonIdblockIds 
        else
            LessonIdblockIds = LessonIdblockIds.Where(x=>x.BlockId != id).ToList();
        if (LessonIdblockIds.Count > 1 && !value)
            BlockWarn = "INFO: This is normally only for lessons such as BTEC and PPS";
        StateHasChanged();
    }

    /// Custom event handler for the new NumLessons field to determine the warning message 
    private void HandleNumLessons(ChangeEventArgs args) {
        try {
            Lesson.NumLessons = long.Parse(args.Value?.ToString().Trim());
            if (Lesson.NumLessons.ToString().Length == 0 || Lesson.NumLessons <= 0) {
                NumLessonsWarn = "There must be at least one lesson per cycle!";
                return;
            }
            NumLessonsWarn = "";
        }
        catch (FormatException) {
            Lesson.NumLessons = 0;
            NumLessonsWarn = "Input must be an integer value!";
        }
    }
    
    /// Custom event handler for the room selection table 
    private void HandleSelectedRooms(long id, bool checkedValue) {
        // If the box was initially unchecked (user clicked to check it), add Room Id to RoomIdlessonIds 
        if (!checkedValue) {
            if (Selected.Contains(id)) return;
            Selected.Add(id);
            RoomIdlessonIds.Add(new RoomIdlessonId { LessonId = Lesson.Id, RoomId = id });
        }
        // Otherwise remove it (if it is not the only remaining Room selected) 
        else {
            if (!Selected.Contains(id)) return;
            if (Selected.Count == 1) {
                SaveBannerService.ShowBanner("There must be at least one available room selected",
                    SaveBannerType.Warning);
                return;
            }
            Selected.Remove(id);
            RoomIdlessonIds = RoomIdlessonIds.Where(x=>x.RoomId != id).ToList();
        }
        StateHasChanged();
    }

    /// Custom event handler to select all rooms in the room selection table 
    private void HandleSelectAllRooms(bool checkAll) {
        if (checkAll) {
            SaveBannerService.ShowBanner("Cannot deselect all! There must be at least one available room selected",
                SaveBannerType.Warning);
            return;
        }
        // If not already selected, select each room in Rooms 
        foreach (Room r in Rooms) {
            if (Selected.Contains(r.Id)) continue;
            Selected.Add(r.Id);
            RoomIdlessonIds.Add(new RoomIdlessonId { LessonId = Lesson.Id, RoomId = r.Id });
        }
        StateHasChanged();
    }
    
    /// Saves the new Lesson to the database and returns to the lessons page 
    private async void Save() {
        // Check if all fields are valid and displays error if not valid 
        if (Lesson.Name == "" || Lesson.ClassCode == "" || Lesson.NumLessons <= 0
            || LessonIdblockIds.Count == 0 || RoomIdlessonIds.Count == 0) {
            SaveBannerService.ShowBanner("All fields must be complete and valid!", SaveBannerType.Error);
            return;
        }
        string message = $"Are you sure you want to add {Lesson.Name}?";
        var options = new MessageBoxOptions(message) {
            Title = "Confirm Action",
            Buttons = new []{"Confirm", "Cancel"}
        };
        // Displays a popup confirmation window with the above message, title, and option buttons 
        var choice = await Electron.Dialog.ShowMessageBoxAsync(Electron.WindowManager.BrowserWindows.First(), options);
        // If cancel was clicked (or the box was quit), do not yet add the lesson to the database (and stay on current page) 
        if (choice.Response == 1) return;
        // Otherwise, add new Lesson (along with LessonIdblockIds and RoomIdlessonIds) to the database 
        await LessonService.InsertLessonAsync(Lesson);
        foreach (LessonIdblockId l in LessonIdblockIds) {
            await LessonIdblockIdService.InsertLessonIdblockIdAsync(l);
        }
        foreach (RoomIdlessonId r in RoomIdlessonIds) {
            await RoomIdlessonIdService.InsertRoomIdlessonIdAsync(r);
        }
        SaveBannerService.ShowBanner("Lesson added successfully", SaveBannerType.Success);
        NavigationManager.NavigateTo("lessons");
    }
    
    /// Determines the CSS class for the sort arrow next to the header of the column being sorted 
    private string SortClass(ColumnDefinition column) {
        return column.SortDirection != SortDirection.NotSet ? $"sort {column.SortDirection.ToString().ToLower()}" : "no-sort";
    }
    
    /// Sorts the room order in the room selection table according to the given property and direction 
    private void SortData(ColumnDefinition sortByColumn = null) {
        bool initial = sortByColumn is null;
        if (initial) {
            sortByColumn = RoomColumns.FirstOrDefault(x => x.SortDirection != SortDirection.NotSet);
            if (sortByColumn is null) return;
        }
        foreach (ColumnDefinition column in RoomColumns) {
            if (column.Property != sortByColumn.Property) column.SortDirection = SortDirection.NotSet;
        }
        // Determines the sort behavior of a header when clicked 
        if (!initial)
            switch (sortByColumn.SortDirection) {
                // If not currently sorting by the clicked property, sort by ascending 
                case SortDirection.NotSet:
                    sortByColumn.SortDirection = SortDirection.Ascending;
                    break;
                // If currently sorting ascending by the clicked property, sort by descending 
                case SortDirection.Ascending:
                    sortByColumn.SortDirection = SortDirection.Descending;
                    break;
                // If currently sorting descending by the clicked property, sort by ascending 
                case SortDirection.Descending:
                    sortByColumn.SortDirection = SortDirection.Ascending;
                    break;
                // Otherwise sort clicked property by ascending 
                default:
                    sortByColumn.SortDirection = SortDirection.Ascending;
                    break;
            }
        // Sort Rooms by the given property 
        switch (sortByColumn.Property) {
            case "Floor": {
                Rooms.Sort((x, y) => {
                    int first = x.Floor.CompareTo(y.Floor);
                    // Sort by Floor numbers first, then alphabetically by Room Number 
                    return first != 0 ? first : x.Number.CompareTo(y.Number);
                });
                // Sort in the opposite direction 
                if (sortByColumn.SortDirection == SortDirection.Descending) {
                    Rooms.Sort((x, y) => {
                        int first = y.Floor.CompareTo(x.Floor);
                        return first != 0 ? first : x.Number.CompareTo(y.Number);
                    });
                }
                break;
            }
            case "Number": {
                Rooms.Sort((x, y) => {
                    int first = x.Number.CompareTo(y.Number);
                    // Sort by Room numbers first, then alphabetically by Floor Number 
                    return first != 0 ? first : x.Floor.CompareTo(y.Floor);
                });
                // Sort in the opposite direction 
                if (sortByColumn.SortDirection == SortDirection.Descending) {
                    Rooms.Sort((x, y) => {
                        int first = y.Number.CompareTo(x.Number);
                        return first != 0 ? first : x.Floor.CompareTo(y.Floor);
                    });
                }
                break;
            }
        }
    }
}
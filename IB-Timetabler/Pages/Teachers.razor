@page "/teachers"
@inject TeacherService TeacherService
@inject LessonService LessonService
@inject RoomIdlessonIdService RoomIdlessonIdService
@inject LessonIdblockIdService LessonIdblockIdService
@inject SaveBannerService SaveBannerService

<TitleComponent Page="Manage Teachers"/>
<br/>
@* Button to activate the AddTeacher modal element *@ 
<button class="button is-success is-outlined" @onclick="OpenAddTeacherModal" style="margin-bottom: 15px">
    <span class="icon" style="font-size: 10px; margin-right: 7px"><i class="fas fa-plus"></i></span>
    <span>Add Teacher</span>
</button>
@if (Selected.Count >= 1) {
    @* Button to delete the selected Teacher(s) *@ 
    <button class="button is-danger" @onclick="DeleteSelected" style="margin-left: 15px">
        <span class="icon" style="font-size: 10px; margin-right: 7px"><i class="fas fa-trash"></i></span>
        <span>Delete Selected Teacher@(Selected.Count == 1 ? "" : "s")</span>
    </button>
}
<br/>
@* The modal menu to add a new Teacher. Only uses is-active CSS class if ShowAddTeacher (otherwise it is hidden) *@ 
<div class="modal @(ShowAddTeacher ? "is-active" : null)">
    @* The dark, translucent background that covers the main part of the teachers page *@ 
    <div class="modal-background"></div>
    <div class="modal-card">
        <header class="modal-card-head">
            <p class="modal-card-title">Add Teacher</p>
        </header>
        <section class="modal-card-body">
            <table class="table is-narrow has-text-centered" style="width: 75%; margin: auto">
                <thead>
                <tr>
                    <th style="cursor: auto;">
                        Teacher Name
                    </th>
                </tr>
                </thead>
                <tbody>
                <tr>
                    <td>
                        @* Text input with custom event handling and live waning message *@ 
                        <input class="input" type="text" @oninput="HandleNewName" placeholder="Teacher Name" value="@NewTeachName"
                               style="max-width: 150px;"/>
                        <span style="font-size: 12px; color: red; display: block;">@NameWarn</span>
                    </td>
                </tr>
                </tbody>
            </table>
        </section>
        @* Buttons to either save the new Teacher or cancel the action and close the modal window *@ 
        <footer class="modal-card-foot" style="padding: 5px !important;">
            <div style="margin: auto">
                <button class="button is-success is-small" @onclick="AddTeacher" style="margin: 5px;">
                    <span class="icon"><i class="fas fa-check"></i></span>
                    <span>Add Teacher</span>
                </button>
                <button class="button is-dark is-outlined is-small" @onclick="CloseAddTeacherModal" style="margin: 5px;">
                    <span class="icon"><i class="fas fa-ban"></i></span>
                    <span>Cancel</span>
                </button>
            </div>
        </footer>
    </div>
</div>

@if (true) {
    @* Determines whether the top checkbox should be checked (if all Teachers have been selected) *@ 
    bool checkAll = Selected.Count == AllTeachers.Count;
    <div style="overflow-x: auto">
        <table class="table is-bordered is-striped is-hoverable has-text-centered" style="width: 50%; margin: auto">
            <thead>
            <tr>
                @* Custom event handler for selecting all Teachers when the top checkbox (or the cell it is in) is clicked *@ 
                <th @onclick="() => HandleSelectAllTeachers(checkAll)" style="width: 25px">
                    <input type="checkbox" checked=@checkAll @onchange="@(() => HandleSelectAllTeachers(checkAll))"
                           style="cursor: pointer;"/>
                </th>
                @* Custom event handling for clicking on a teacher column header to sort by that property *@ 
                @foreach (ColumnDefinition column in TeacherColumns) {
                    <th @onclick="@(() => SortData(column))">
                        @column.Title
                        <span style="float: right" class="@(SortClass(column))"></span>
                    </th>
                }
            </tr>
            </thead>
            <tbody>
            @* Loop for all Teachers (in AllTeachers) with custom event handling for clicked checkboxes *@ 
            @foreach (Teacher t in AllTeachers) {
                @* Determines whether the checkbox for a given Teacher should be checked *@ 
                bool check = Selected.Contains(t.Id);
                <tr>
                    <td @onclick="() => HandleSelectedTeachers(t.Id, check)" style="cursor: pointer;">
                        <input type="checkbox" checked=@check @onchange="@(() => HandleSelectedTeachers(t.Id, check))"
                               style="cursor: pointer;"/>
                    </td>
                    @* Get the value of each property in TeacherColumns (to display in the table) *@ 
                    @foreach (var column in TeacherColumns) {
                        <td>
                            @t.GetType().GetProperty(column.Property)?.GetValue(t)
                        </td>
                    }
                </tr>
            }
            </tbody>
        </table>
    </div>
}

<br/><br/><br/><br/>
@code {
    
    List<Teacher> AllTeachers = null;
    List<Lesson> Lessons = null;
    List<ColumnDefinition> TeacherColumns = null;
    List<long> Selected = null;
    /// If true, the AddTeacher modal window will be displayed 
    bool ShowAddTeacher = false;
    /// The name of a new Teacher to add 
    string NewTeachName;
    /// Custom warning message when adding a Teacher in the AddTeacher modal window 
    string NameWarn;

    /// Initializes properties once page is ready to start 
    protected override async void OnInitialized() {
        await RefreshTeachers();
        await RefreshLessons();
        TeacherColumns = new List<ColumnDefinition> {
            new ColumnDefinition {Property = "Name", Title = "Name", SortDirection = SortDirection.Ascending}
        };
        Selected = new List<long>();
        NewTeachName = "";
        NameWarn = "";
        SortData();
    }

    /// Retrieves all Teachers currently recorded in the database and updates AllTeachers 
    private async Task RefreshTeachers() {
        AllTeachers = await TeacherService.GetAllTeachersAsync();
    }
    
    /// Retrieves all Lessons currently recorded in the database and updates Lessons 
    private async Task RefreshLessons() {
        Lessons = await LessonService.GetAllLessonsAsync();
    }
    
    /// Custom event handler for clicking on checkboxes in the Teachers table 
    private void HandleSelectedTeachers(long id, bool checkedValue) {
        if (!checkedValue) {
            if (!Selected.Contains(id)) {
                Selected.Add(id);
            }
        }
        else {
            if (Selected.Contains(id)) {
                Selected.Remove(id);
            }
        }
    }

    /// Custom event handler for clicking the select/deselect all checkbox in the Teachers table 
    private void HandleSelectAllTeachers(bool checkAll) {
        if (!checkAll) {
            foreach (Teacher t in AllTeachers) {
                if (Selected.Contains(t.Id)) continue;
                Selected.Add(t.Id);
            }
        }
        else {
            Selected.Clear();
        }
    }
    
    /// Custom event handler to customize warning message in the AddTeacher modal window 
    private void HandleNewName(ChangeEventArgs args) {
        NewTeachName = args.Value?.ToString()?.Trim();
        NameWarn = "";
        if (NewTeachName?.Length == 0) 
            NameWarn = "The teacher must have a name!";
        else if (AllTeachers.Any(x => x.Name == NewTeachName)) 
            NameWarn = "This teacher already exists!";
    }

    /// Sets ShowAddTeacher to true and resets NewTeachName 
    private void OpenAddTeacherModal() {
        ShowAddTeacher = true;
        NewTeachName = "";
    }

    /// Sets ShowAddTeacher to false and resets NewTeachName and NameWarn 
    private void CloseAddTeacherModal() {
        ShowAddTeacher = false;
        NewTeachName = "";
        NameWarn = "";
    }
    
    /// If valid, update database, RefreshTeachers(), and CloseAddTeacherModal(). Otherwise: display error. 
    private async void AddTeacher() {
        if (NewTeachName.Length == 0) {
            SaveBannerService.ShowBanner("The teacher must have a name!", SaveBannerType.Error);
            return;
        }
        if (AllTeachers.Any(x => x.Name == NewTeachName)) {
            SaveBannerService.ShowBanner("This teacher already exists!", SaveBannerType.Error);
            return;
        }
        await TeacherService.InsertTeacherAsync(new Teacher {Id = TeacherService.GetNextId().Result,
            Name = NewTeachName});
        await RefreshTeachers();
        SortData();
        CloseAddTeacherModal();
        SaveBannerService.ShowBanner("New teacher added successfully!", SaveBannerType.Success);
    }
    
    /// Ask for confirmation and remove selected Teachers from the database 
    private async void DeleteSelected() {
        string message = Selected.Count > 1 ? $"Are you sure you want to delete {Selected.Count.ToString()} teachers?" :
            $"Are you sure you want to delete {AllTeachers.Find(x=>x.Id == Selected[0])?.Name}?";
        message += "\nWarning: Lessons left without a teacher will also be deleted!";
        var options = new MessageBoxOptions(message) {
            Title = "Confirm Action",
            Buttons = new []{"Confirm", "Cancel"}
        };
        // Display action confirmation popup window and await user response 
        var choice = await Electron.Dialog.ShowMessageBoxAsync(Electron.WindowManager.BrowserWindows.First(), options);
        // If operation cancelled, do nothing and return 
        if (choice.Response == 1) return;
        List<Lesson> lessons = new List<Lesson>();
        // Otherwise, loop through the Teachers marked for deletion 
        while (Selected.Count > 0) {
            Teacher t = AllTeachers.Find(x => x.Id == Selected[0]);
            // Delete the current Teacher from the database 
            await TeacherService.DeleteTeacherAsync(t);
            // Collect all Lessons with a TeacherId corresponding to the current block 
            lessons.AddRange(Lessons.Where(x => x.TeacherId == t?.Id));
            Selected.RemoveAt(0);
        }
        // Refresh Teachers and Lessons to match with the database 
        await RefreshTeachers();
        await RefreshLessons();
        // Loop through all collected lessons (from the removed Teachers) 
        foreach (Lesson l in lessons) {
            // Delete the Lesson from the database as well as all RoomIdlessonIds and LessonIdblockIds with same Id as the deleted Lesson 
            await LessonService.DeleteLessonAsync(l);
            await RoomIdlessonIdService.DeleteRoomIdlessonIdsAsync(RoomIdlessonIdService
                .GetAllRoomIdlessonIdsAsync().Result.Where(x=>x.LessonId == l.Id));
            await LessonIdblockIdService.DeleteLessonIdblockIdsAsync(LessonIdblockIdService
                .GetAllLessonIdblockIdsAsync().Result.Where(x=>x.LessonId == l.Id));
        }
        SortData();
        StateHasChanged();
        SaveBannerService.ShowBanner("Teacher(s) deleted successfully", SaveBannerType.Success);
    }
    
    /// Determines the CSS class for the sort arrow next to the header of the column being sorted 
    private string SortClass(ColumnDefinition column) {
        return column.SortDirection != SortDirection.NotSet ? $"sort {column.SortDirection.ToString().ToLower()}" : "no-sort";
    }
    
    /// Sorts the Teacher order according to the given property and direction 
    private void SortData(ColumnDefinition sortByColumn = null) {
        bool initial = sortByColumn is null;
        if (sortByColumn is null) {
            sortByColumn = TeacherColumns.FirstOrDefault(x => x.SortDirection != SortDirection.NotSet);
            if (sortByColumn is null) return;
        }
        foreach (ColumnDefinition column in TeacherColumns) {
            if (column.Property != sortByColumn.Property) column.SortDirection = SortDirection.NotSet;
        }
        if (!initial)
            if (!initial)
            // Determines the sort behavior of a header when clicked 
            switch (sortByColumn.SortDirection) {
                // If not currently sorting by the clicked property, sort by ascending 
                case SortDirection.NotSet:
                    sortByColumn.SortDirection = SortDirection.Ascending;
                    break;
                // If currently sorting ascending by the clicked property, sort by descending 
                case SortDirection.Ascending:
                    sortByColumn.SortDirection = SortDirection.Descending;
                    break;
                // If currently sorting descending by the clicked property, sort by ascending 
                case SortDirection.Descending:
                    sortByColumn.SortDirection = SortDirection.Ascending;
                    break;
                // Otherwise sort clicked property by ascending 
                default:
                    sortByColumn.SortDirection = SortDirection.Ascending;
                    break;
            }
        // Only compare Teachers by name to determine sort order 
        AllTeachers.Sort((x, y)=>x.Name.CompareTo(y.Name));
        if (sortByColumn.SortDirection == SortDirection.Descending) 
            AllTeachers.Sort((x, y)=>y.Name.CompareTo(x.Name));
        }
}
@page "/lessons/"
@using System.Reflection
@inject LessonService lessonService

<TitleComponent Page="Lessons"></TitleComponent>

<br/>
<NavLink class="button" href="lessons/addLesson" style="text-decoration: none; margin-bottom: 15px">
    <span class="icon is-medium"><i class="fas fa-plus"></i></span>
    <span>Add Lesson</span>
</NavLink>

<br/>
Click on a lesson name to edit!
<br/>

@if (Lessons is null) {
    <button class="button is-loading is-large border-0 has-text-centered"></button>
}
else {
    <br/>
    <div style="overflow-x: auto">
        <table class="table is-bordered is-striped is-hoverable" style="width: 100%">
            <thead>
            <tr class="has-text-centered">
                @foreach (var head in Headers) {
                    <th>
                        @head
                    </th>
                }
            </tr>
            </thead>
            <tbody>
            @foreach (Lesson l in Lessons) {
                <tr class="has-text-centered">
                    <td>
                        @* onactivate="@((e) => SelectLesson(l.Id))" ondeactivate="@((e) => DeselectLesson(l.Id))" *@
                        <input type="checkbox" @onchange="eventArgs => { SelectedLesssons(l.Id, eventArgs.Value); }"/>
                    </td>
                @foreach (var member in l.GetType().GetMembers()) {
                    @if (member.MemberType == MemberTypes.Property &&
                         !columnsToExclude.Contains(member.Name.ToLower())) {
                        @if (member.Name == "Name") {
                            <td>
                                <a href="@($"lessons/{l.Id.ToString()}")">@l.Name</a>
                            </td>
                        }
                        else {
                            <td>
                                @l.GetType().GetProperty(member.Name)?.GetValue(l)
                            </td>
                        }
                    }
                }
            </tr>
            }
            </tbody>
        </table>
    </div>
}

<br/><br/>
@code {

    List<Lesson> Lessons = null;
    List<string> Headers = new List<string> {"", "Name", "Year", "Level", "Lessons Per Cycle", "Teacher"};
    string[] columnsToExclude = new[] {"id", "classcode"};
    List<long> Selected = new List<long>();
    // int selectedLessonIndex = -1;
    
    protected override async void OnInitialized() {
        await RefreshLessons();
    }

    private async Task RefreshLessons() {
        Lessons = await lessonService.GetAllLessonsAsync();
    }

    private void SelectedLesssons(long id, object checkedValue) {
        if ((bool)checkedValue) {
            if (!Selected.Contains(id)) {
                Selected.Add(id);
            }
        }
        else {
            if (Selected.Contains(id)) {
                Selected.Remove(id);
            }
        }
    }

    private void SelectLesson(long id) {
        Selected.Add(id);
        Console.WriteLine(Selected.Count);
    }
    
    private void DeselectLesson(long id) {
        Selected.Remove(id);
        Console.WriteLine(Selected.Count);
    }
}
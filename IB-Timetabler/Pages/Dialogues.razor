@page "/dialogues"
@using System.Security.Cryptography

<TitleComponent Page="Diologues"></TitleComponent>
<br/>
<div class="row">
    <div class="col-4">
        <h4>Message Box Dialogue</h4>
        <button class="button" @onclick="ShowMessageBox">Show Message Box</button>
    </div>
    <div class="col-4">
        <h4>Notification</h4>
        <button class="btn btn-success" @onclick="ShowNotification">Show Notification</button>
    </div>
    <div class="col-4">
        <h4>Save File Dialogue</h4>
        <button class="btn btn-warning" @onclick="SaveFileDialogueAsync">Show Save File Dialogue</button>
        <p>@filePath</p>
    </div>
    <div class="col-4">
        <h4>Open File Dialogue</h4>
        <button class="btn btn-primary" @onclick="OpenFileDialogueAsync">Show Open File Dialogue</button>
        <p>@selectedFile</p>
    </div>
</div>

@code {

    string filePath = "";
    string selectedFile = "";
    
    // protected override void OnInitialized() {
    //     base.OnInitialized();
    //     
    // }

    async void ShowMessageBox() {
        var options = new MessageBoxOptions("Hello World!") {
            Title = "Hello",
            Icon = selectedFile
        };
        await Electron.Dialog.ShowMessageBoxAsync(options);
    }

    void ShowNotification() {
        var options = new NotificationOptions("Notification Test!", "This should be the body") {
            Icon = filePath,
            TimeoutType = "never",
            Urgency = "critical",
            OnClick = async () => {
                await Electron.Dialog.ShowMessageBoxAsync(new MessageBoxOptions("Message") {
                    Icon = selectedFile,
                    Title = "Title Thing"
                });
            }
        };
        Electron.Notification.Show(options);
    }

    async void SaveFileDialogueAsync() {
        var options = new SaveDialogOptions {
            Title = "Choose a path to save the file",
            Filters = new[] {
                new FileFilter {
                    Name = "JSON File",
                    Extensions = new[] {"json"}
                },
                new FileFilter {
                    Name = "XML File",
                    Extensions = new[] {"xml"}
                },
                new FileFilter {
                    Name = "Text File",
                    Extensions = new[] {"txt"}
                }
            }
        };
        var window = Electron.WindowManager.BrowserWindows.First();
        var path = await Electron.Dialog.ShowSaveDialogAsync(window, options);
        if (path is not null) filePath = path;
        StateHasChanged();
    }

    async void OpenFileDialogueAsync() {
        var options = new OpenDialogOptions {
            Title = "Choose Files",
            Filters = new[] {
                new FileFilter {
                    Name = "Image File",
                    Extensions = new[] {"png", "jpg", "jpeg", "bmp"}
                },
                new FileFilter {
                    Name = "XML File",
                    Extensions = new[] {"xml"}
                },
                new FileFilter {
                    Name = "Text File",
                    Extensions = new[] {"txt"}
                }
            },
            // Properties = new[] {
            //     OpenDialogProperty.multiSelections, OpenDialogProperty.showHiddenFiles
            // }
        };
        var window = Electron.WindowManager.BrowserWindows.First();
        string[] selectedFiles = await Electron.Dialog.ShowOpenDialogAsync(window, options);
        if (selectedFiles is not null && selectedFiles.Length > 0) selectedFile = selectedFiles[0];
        StateHasChanged();
    }
}
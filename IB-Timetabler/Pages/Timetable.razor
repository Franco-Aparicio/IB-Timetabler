@page "/timetable"
@page "/timetable/{SaveSuccess}"
@inject NavigationManager NavigationManager
@inject SchedulerService SchedulerService
@inject SaveService SaveService
@inject SavedLessonService SavedLessonService
@inject SavedLessonIdperiodIdService SavedLessonIdperiodIdService
@inject LessonService LessonService
@inject PeriodService PeriodService
@inject TeacherService TeacherService
@inject RoomService RoomService
@inject SaveBannerService SaveBannerService

<TitleComponent Page="Timetable"/>

<br/>
@if (LoadedSaveId == 0) {
    <div>There are no saved timetables</div>
    <button class="button is-info @(Generating ? "is-loading" : null)" @onclick="GetNewTimetable" style="font-size: 22px; width: 250px; height: 75px; margin: auto calc(50% - 125px)">
        <span class="icon" style=""><i class="fas fa-calculator"></i></span>
        <span style="margin-right: -7px;">Generate Timetable</span>
    </button>
}
else {
    <button class="button is-info @(Generating ? "is-loading" : null)" @onclick="GetNewTimetable" style="margin-bottom: 15px">
        <span class="icon" style="margin-right: 7px"><i class="fas fa-calculator"></i></span>
        <span>Generate Timetable</span>
    </button>
    <button class="button is-danger" @onclick="DeleteSave" style="margin-left: 15px;">
        <span class="icon" style="font-size: 10px; margin-right: 7px"><i class="fas fa-trash"></i></span>
        <span>Delete Saved Timetable</span>
    </button> 
    <NavLink class="button is-outlined is-success" href=@($"timetable/timetablePDF/{LoadedSaveId.ToString()}") style="margin: 0 0 15px 15px;text-decoration: none;">
        <span class="icon" style="margin-right: 7px"><i class="oi oi-data-transfer-download"></i></span>
        <span>Save as PDF</span>
    </NavLink>
    <button class="button" style="float: right;" @onclick="OpenRenameSave">Rename Saved Timetable</button>
    <div class="tabs is-fullwidth is-boxed" style="@(LoadingTab ? "cursor: progress" : "auto")">
        <ul style="cursor: inherit">
            @foreach (Save s in Saves) {
                <li class="@(s.Id == LoadedSaveId ? "is-active" : null)" @onclick="@(() => {SetTimetable(s.Id); LoadingTab = true;})"
                    style="cursor: inherit">
                    <a style="@(LoadingTab ? "cursor: progress" : "pointer")">
                        <div>@s.Name</div>
                    </a>
                </li>
            }
        </ul>
    </div>
    <div class="modal @(ShowRename ? "is-active" : null)">
        <div class="modal-background"></div>
        <div class="modal-card">
            <header class="modal-card-head">
                <p class="modal-card-title">Rename Selected Timetable</p>
            </header>
            <section class="modal-card-body">
                <table class="table is-narrow has-text-centered" style="width: 75%; margin: auto">
                    <thead>
                    <tr>
                        <th style="cursor: auto;">
                            Saved Timetable Name
                        </th>
                    </tr>
                    </thead>
                    <tbody>
                    <tr>
                        <td>
                            <input class="input" type="text" @oninput="HandleRename" placeholder="@Saves.Find(x => x.Id == LoadedSaveId)?.Name"
                                   value="@NewSaveName" style="max-width: 150px;"/>
                            <span style="font-size: 12px; color: red; display: block;">@NameWarn</span>
                        </td>
                    </tr>
                    </tbody>
                </table>
            </section>
            <footer class="modal-card-foot" style="padding: 5px !important;">
                <div style="margin: auto">
                    <button class="button is-success is-small" @onclick="RenameCurrentSave" style="margin: 5px;">
                        <span class="icon"><i class="fas fa-check"></i></span>
                        <span>Rename</span>
                    </button>
                    <button class="button is-dark is-outlined is-small" @onclick="CloseRenameSave" style="margin: 5px;">
                        <span class="icon"><i class="fas fa-ban"></i></span>
                        <span>Cancel</span>
                    </button>
                </div>
            </footer>
        </div>
    </div>
}
@if (Lessons is not null && Lessons.Count == 0) {
    <div>
        <br/>
        <div style="font-size: 19px;">
            No timetable could be generated before the timeout limit of 5 minutes.
        </div>
        <div style="font-size: 15px">
            Try less lessons per cycle or rearranging the teachers and rooms first
            then manually making adjustments after.
        </div>
    </div>
}
@if (LoadedSaveId != 0 && Lessons is not null && SavedLessonIdperiodIds is not null) {
    <TimetableContainerComponent Lessons="Lessons" Periods="Periods" Teachers="TeacherService.GetAllTeachersAsync().Result"
         SavedLessons="SavedLessons" SavedLessonIdperiodIds="SavedLessonIdperiodIds"
         Rooms="RoomService.GetAllRoomsAsync().Result" Update="HandleUpdate"/>
}
else if (LoadedSaveId != 0 && Lessons is null) {
    <button class="button is-loading is-large border-0 has-text-centered" style="margin: auto"></button>
}


@code{

    [Parameter]
    public string SaveSuccess { get; set; } = null;
    
    List<Save> Saves; 
    List<Lesson> Lessons = null;
    List<Period> Periods;
    List<SavedLessonIdperiodId> AllSavedLessonIdperiodIds;
    List<SavedLessonIdperiodId> SavedLessonIdperiodIds = null;
    List<SavedLesson> SavedLessons;
    long LoadedSaveId;
    bool Generating;
    bool LoadingTab;
    bool ShowRename = false;
    string NewSaveName;
    string NameWarn;

    protected override async void OnInitialized() {
        await RefreshSaves();
        await RefreshSavedLessonIdperiodIds();
        await RefreshSavedLessons();
        Lessons = null;
        SavedLessonIdperiodIds = null;
        Periods = await PeriodService.GetAllPeriodsAsync();
        Generating = false;
        LoadingTab = false;
        LoadedSaveId = 0;
        NewSaveName = "";
        NameWarn = "";
        if (Saves.Count <= 0) return;
        LoadedSaveId = Saves[0].Id;
        SetTimetable(Saves[0].Id);
        if (SaveSuccess is null) return;
        string message = SaveSuccess.ToLower() == "true" ? "Timetable successfully saved as PDF file" :
            "Failed to create timetable PDF file";
        SaveBannerType type = SaveSuccess.ToLower() == "true" ? SaveBannerType.Success : SaveBannerType.Error;
        SaveBannerService.ShowBanner(message, type);
    }

    private async Task RefreshSaves() {
        Saves = await SaveService.GetAllSavesAsync();
    }
    
    private async Task RefreshSavedLessonIdperiodIds() {
        AllSavedLessonIdperiodIds = await SavedLessonIdperiodIdService.GetAllSavedLessonIdperiodIdsAsync();
    }

    private async Task RefreshSavedLessons() {
        SavedLessons = await SavedLessonService.GetAllSavedLessonsAsync();
    }

    private async void RenameCurrentSave() {
        if (NewSaveName.Length == 0) {
            SaveBannerService.ShowBanner("The save must have a name!", SaveBannerType.Error);
            return;
        }
        int count = Saves.Count(x => x.Name.Contains(NewSaveName));
        string makeUniqueName = count == 0 ? "" : $"({count.ToString()})";
        Save save = await SaveService.GetSaveAsync(LoadedSaveId);
        save.Name = NewSaveName + makeUniqueName;
        await SaveService.UpdateSaveAsync(save);
        CloseRenameSave();
        SaveBannerService.ShowBanner($"Successfully renamed timetable to {save.Name}", SaveBannerType.Success);
    }

    private void HandleRename(ChangeEventArgs args) {
        NewSaveName = args.Value?.ToString()?.Trim();
        NameWarn = "";
        if (NewSaveName?.Length == 0)
            NameWarn = "The save must have a name!";
    }

    private void OpenRenameSave() {
        ShowRename = true;
        NewSaveName = "";
    }
    
    private void CloseRenameSave() {
        ShowRename = false;
        NewSaveName = "";
        NameWarn = "";
    }

    private async Task HandleUpdate(List<dynamic> update) {
        if (update[0].GetType().ToString().ToLower() == "ib_timetabler.models.savedlesson") {
            await SavedLessonService.UpdateSavedLessonAsync((SavedLesson) update[0]);
            SaveBannerService.ShowBanner("Successfully updated saved room", SaveBannerType.Success);
            return;
        }
        await SavedLessonIdperiodIdService.DeleteSavedLessonIdperiodIdsAsync(update.Take(1).Select(x=>(SavedLessonIdperiodId) x));
        await SavedLessonIdperiodIdService.InsertSavedLessonIdperiodIdAsync((SavedLessonIdperiodId) update[1]);
        StateHasChanged();
        SaveBannerService.ShowBanner($"Successfully updated timetable {Saves.Find(x=>x.Id == LoadedSaveId)?.Name}",
            SaveBannerType.Success);
    }
    
    private async Task GetNewTimetable() {
        await RefreshSaves();
        await RefreshSavedLessonIdperiodIds();
        await RefreshSavedLessons();
        Lessons = null;
        SavedLessonIdperiodIds = null;
        Periods = await PeriodService.GetAllPeriodsAsync();
        Generating = false;
        LoadingTab = false;
        Task task = new Task(() => SaveTimetable(SchedulerService.GenerateTimetable()));
        Generating = true;
        task.Start();
        await task;
        Generating = false;
        StateHasChanged();
        if (Lessons.Count > 0) 
            SaveBannerService.ShowBanner("New timetable generated successfully", SaveBannerType.Success);
        else 
            SaveBannerService.ShowBanner("Failed to generate timetable before timeout", SaveBannerType.Error);
    }

    private async void SetTimetable(long id) {
        Lessons = null;
        SavedLessonIdperiodIds = null;
        await LoadTimetable(id);
        StateHasChanged();
    }

    private async Task LoadTimetable(long id) {
        LoadedSaveId = id;
        Task task = new Task(() => LoadSaveId(id));
        LoadingTab = true;
        task.Start();
        await task;
        LoadingTab = false;
    }
    
    private void LoadSaveId(long id) {
        var temp = SavedLessons.Where(x => x.SaveId == id).ToList();
        Lessons = temp.Select(x => LessonService.GetLessonAsync(x.LessonId).Result).ToList();
        SavedLessonIdperiodIds = AllSavedLessonIdperiodIds.Where(x =>
            temp.Select(y => y.Id).Contains(x.SavedLessonId)).ToList();
    }
    
    private async void SaveTimetable(List<LessonVar> lessons) {
        if (lessons.Count == 0) {
            Lessons = new List<Lesson>();
            return;
        }
        await RefreshSaves();
        int count = Saves.Count(x => x.Name.Contains("Unnamed"));
        string makeUniqueName = count == 0 ? "" : $"({count.ToString()})";
        long sId = await SaveService.GetNextId();
        await SaveService.InsertSaveAsync(new Save { Id = sId, Name = "Unnamed" + makeUniqueName });
        foreach (LessonVar l in lessons) {
            long savedLessonId = await SavedLessonService.GetNextId();
            await SavedLessonService.InsertSavedLessonAsync(new SavedLesson {
                Id = savedLessonId,
                SaveId = sId, LessonId = l.Id, RoomId = l.RoomId});
            foreach (PeriodVar p in l.Periods) {
                await SavedLessonIdperiodIdService.InsertSavedLessonIdperiodIdAsync(
                    new SavedLessonIdperiodId { PeriodId = p.Id, SavedLessonId = savedLessonId });
            }
        }
        await RefreshSaves();
        await RefreshSavedLessonIdperiodIds();
        await RefreshSavedLessons();
        LoadedSaveId = sId;
        LoadSaveId(sId);
    }
    
    private async Task DeleteSave() {
        Save save = Saves.Find(x => x.Id == LoadedSaveId);
        string message = $"Are you sure you want to delete {save?.Name}?";
        var options = new MessageBoxOptions(message) {
            Title = "Confirm Action",
            Buttons = new []{"Confirm", "Cancel"}
        };
        var choice = await Electron.Dialog.ShowMessageBoxAsync(Electron.WindowManager.BrowserWindows.First(), options);
        if (choice.Response == 1) return;
        await SaveService.DeleteSaveAsync(save);
        var temp = SavedLessons.Where(x => x.SaveId == LoadedSaveId).ToList();
        await SavedLessonService.DeleteSavedLessonsAsync(temp);
        await SavedLessonIdperiodIdService.DeleteSavedLessonIdperiodIdsAsync(SavedLessonIdperiodIds.Where(
            x => temp.Select(y => y.Id).Contains(x.SavedLessonId)).ToList());
        await RefreshSaves();
        await RefreshSavedLessons();
        await RefreshSavedLessonIdperiodIds();
        LoadedSaveId = Saves.Count > 0 ? Saves[0].Id : 0;
        Lessons = null;
        SavedLessonIdperiodIds = null;
        if (LoadedSaveId != 0) SetTimetable(LoadedSaveId);
        SaveBannerService.ShowBanner($"Successfully deleted {save?.Name}", SaveBannerType.Success);
    }
}
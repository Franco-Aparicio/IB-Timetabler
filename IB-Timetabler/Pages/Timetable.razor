@page "/timetable"
@inject SchedulerService SchedulerService
@inject SaveService SaveService
@inject SavedLessonService SavedLessonService
@inject SavedLessonIdperiodIdService SavedLessonIdperiodIdService
@inject LessonService LessonService
@inject SaveBannerService SaveBannerService
@inject PeriodService PeriodService

<TitleComponent Page="Timetable"></TitleComponent>

<br/>
@if (LoadedSaveId == 0) {
    <div>There are no saved timetables</div>
    <button class="button is-info @(Generating ? "is-loading" : null)" @onclick="GetNewTimetable" style="font-size: 22px; width: 250px; height: 75px; margin: auto calc(50% - 125px)">
        <span class="icon" style=""><i class="fas fa-calculator"></i></span>
        <span style="margin-right: -7px;">Generate Timetable</span>
    </button>
}
else {
    <button class="button is-info @(Generating ? "is-loading" : null)" @onclick="GetNewTimetable" style="margin-bottom: 15px">
        <span class="icon" style="margin-right: 7px"><i class="fas fa-calculator"></i></span>
        <span>Generate Timetable</span>
    </button>
    <div class="tabs is-fullwidth is-boxed" style="@(LoadingTab ? "cursor: progress" : "auto")">
        <ul style="cursor: inherit">
            @foreach (Save s in Saves) {
                <li class="@(s.Id == LoadedSaveId ? "is-active" : null)" @onclick="@(() => {SetTimetable(s.Id); LoadingTab = true;})"
                    style="cursor: inherit">
                    <a style="@(LoadingTab ? "cursor: progress" : "pointer")">
                        <span>@s.Name</span>
                    </a>
                </li>
            }
        </ul>
    </div>
}
@if (Lessons is not null && Lessons.Count == 0) {
    <div>
        <br/>
        <div style="font-size: 19px;">
            No timetable could be generated before the timeout limit of 5 minutes.
        </div>
        <div style="font-size: 15px">
            Try less lessons per cycle or rearranging the teachers and rooms first
            then manually making adjustments after.
        </div>
    </div>
}
@if (LoadedSaveId != 0 && Lessons is not null && SavedLessonIdperiodIds is not null) {
@*     for (int week = 0; week < 2; week++) { *@
@*         <TimetableWeekComponent SavedLessonIdperiodIds="SavedLessonIdperiodIds.Where(x => Periods.Find(y => y.Id == x.PeriodId)?.Week == week).ToList()" Update="HandleUpdate" Week="week"> *@
@*             @for (int day = 0; day < 5; day++) { *@
@*                 <TimetableDayComponent Day="day"> *@
@*                     @foreach (var period in Periods.Where(x=>x.Week == week && x.Day == day)) { *@
@*                         <TimetablePeriodComponent PeriodNum="period.TimePeriod"/> *@
@*                     } *@
@*                 </TimetableDayComponent> *@
@*             } *@
@*         </TimetableWeekComponent> *@
@*     } *@
@*     <p>@SavedLessonIdperiodIds.Count.ToString()</p> *@
    <TimetableContainerComponent Lessons="Lessons" Periods="Periods" SavedLessonIdperiodIds="SavedLessonIdperiodIds" Update="HandleUpdate"/>
@*     <TimetableContainerComponent Lessons="Lessons" Periods="Periods" LessonService="LessonService" *@
@*                                  SavedLessonService="SavedLessonService" PeriodService="PeriodService" *@
@*                                  TeacherService="TeacherService" *@
@*                                  SavedLessonIdperiodIds="SavedLessonIdperiodIds" Update="HandleUpdate"/> *@
}
else if (LoadedSaveId != 0 && Lessons is null) {
    <button class="button is-loading is-large border-0 has-text-centered" style="margin: auto"></button>
}


@code{

    List<Save> Saves; 
    List<Lesson> Lessons = null;
    List<Period> Periods;
    List<SavedLessonIdperiodId> AllSavedLessonIdperiodIds;
    List<SavedLessonIdperiodId> SavedLessonIdperiodIds = null;
    long LoadedSaveId;
    bool Generating;
    bool LoadingTab;

    protected override async void OnInitialized() {
        await RefreshSaves();
        await RefreshSavedLessonIdperiodIds();
        Lessons = null;
        Periods = await PeriodService.GetAllPeriodsAsync();
        Generating = false;
        LoadingTab = false;
        LoadedSaveId = 0;
        if (Saves.Count <= 0) return;
        LoadedSaveId = Saves[0].Id;
        SetTimetable(Saves[0].Id);
    }

    private async Task RefreshSaves() {
        Saves = await SaveService.GetAllSavesAsync();
    }
    
    private async Task RefreshSavedLessonIdperiodIds() {
        AllSavedLessonIdperiodIds = await SavedLessonIdperiodIdService.GetAllSavedLessonIdperiodIdsAsync();
    }

    private void HandleUpdate(SavedLessonIdperiodId[] update) {
        Console.WriteLine($"Removed {update[0].SavedLessonId.ToString()} from {update[0].PeriodId.ToString()}");
        Console.WriteLine($"Added {update[1].SavedLessonId.ToString()} to {update[1].PeriodId.ToString()}");
    }
    
    private async void GetNewTimetable() {
        Task task = new Task(() => SaveTimetable(SchedulerService.GenerateTimetable()));
        Generating = true;
        task.Start();
        await task;
        Generating = false;
        StateHasChanged();
    }

    private async void SetTimetable(long id) {
        Lessons = null;
        SavedLessonIdperiodIds = null;
        await LoadTimetable(id);
    }

    private async Task LoadTimetable(long id) {
        Task task = new Task(() => LoadSaveId(id));
        LoadingTab = true;
        task.Start();
        await task;
        LoadingTab = false;
        LoadedSaveId = id;
        StateHasChanged();
    }
    
    private async void LoadSaveId(long id) {
        Save s = Saves.Find(x => x.Id == id);
        var temp = await SavedLessonService.GetAllSavedLessonsAsync();
        temp = temp.Where(x => x.SaveId == id).ToList();
        Lessons = temp.Select(x => LessonService.GetLessonAsync(x.LessonId).Result).ToList();
        SavedLessonIdperiodIds = AllSavedLessonIdperiodIds.Where(x=>
            temp.Select(y=>y.Id).Contains(x.SavedLessonId)).ToList();
    }
    
    private async void SaveTimetable(List<LessonVar> lessons) {
        if (lessons.Count == 0) {
            Lessons = new List<Lesson>();
            return;
        }
        await RefreshSaves();
        int count = Saves.Count(x => x.Name.Contains("Unnamed"));
        string makeUniqueName = count == 0 ? "" : $"({count.ToString()})";
        long sId = await SaveService.GetNextId();
        await SaveService.InsertSaveAsync(new Save { Id = sId, Name = "Unnamed" + makeUniqueName });
        foreach (LessonVar l in lessons) {
            long savedLessonId = await SavedLessonService.GetNextId();
            await SavedLessonService.InsertSavedLessonAsync(new SavedLesson {
                Id = savedLessonId,
                SaveId = sId, LessonId = l.Id, RoomId = l.RoomId});
            foreach (PeriodVar p in l.Periods) {
                await SavedLessonIdperiodIdService.InsertSavedLessonIdperiodIdAsync(
                    new SavedLessonIdperiodId { PeriodId = p.Id, SavedLessonId = savedLessonId });
            }
        }
        await RefreshSaves();
        await RefreshSavedLessonIdperiodIds();
        SetTimetable(sId);
    }
}
@* To route to this page, a SaveId parameter must be given in the URI *@ 

@page "/timetable/timetablePDF/{SaveId}"
@layout EmptyLayout
@inject NavigationManager NavigationManager
@inject SaveService SaveService
@inject SavedLessonService SavedLessonService
@inject SavedLessonIdperiodIdService SavedLessonIdperiodIdService
@inject LessonService LessonService
@inject PeriodService PeriodService
@inject TeacherService TeacherService
@inject RoomService RoomService

@* Display the date in the top right corner of the top page *@ 
<div class="px-4" style="justify-content: flex-end; display: flex; align-items: center;">
    <DateTimeComponent/>
</div>
<h2 style="text-align: center">@($"Timetable: {Save.Name}")</h2>

@* Display both weeks' timetables *@ 
@for (int week = 0; week < 2; week++) {
    <div>
        <h3>Week @(week == 0 ? "A" : "B")</h3>

        <table class="table is-striped is-bordered has-text-centered" style="width: 100%">
            <thead>
            <tr class="has-text-centered">
                <th style="cursor: auto">Period</th>
                @foreach (var day in Days) {
                    <th style="cursor: auto">
                        @day
                    </th>
                }
            </tr>
            </thead>
            <tbody>
            @* Loop as many times as the maximum number of periods on a given day of the week *@ 
            @for (long periodNum = 1; periodNum <= Periods.Where(x => x.Week == week)
                .Max(x => x.TimePeriod); periodNum++) {
                <tr>
                    <td class="has-text-centered" style="vertical-align: middle">@periodNum.ToString()</td>
                    @for (int day = 0; day < 5; day++) {
                        var period = GetPeriod(week, day, periodNum);
                        // If the Period does not exist on the given day, place an empty cell
                        if (period is null) {
                            <td></td>
                            continue;
                        }
                        <td>
                            @* Loop for each SavedLesson has been scheduled for the current Period *@ 
                            @foreach (var savedLessonIdperiodId in SavedLessonIdperiodIds.Where(x =>
                                x.PeriodId == period.Id)) {
                                @* Find the Lesson that the SavedLesson represents *@ 
                                Lesson lesson = Lessons.FirstOrDefault(x => x.Id == SavedLessons.FirstOrDefault(
                                    y => y.Id == savedLessonIdperiodId.SavedLessonId)?.LessonId);
                                <div style="border-bottom: 1px solid #dbdbdb; padding: 5px 0; font-size: 14px;">
                                    <p style="margin: auto">
                                        @lesson?.Name
                                    </p>
                                    <p style="margin: auto">
                                        Teacher: @Teachers.FirstOrDefault(x => x.Id == lesson?.TeacherId)?.Name
                                    </p>
                                    <p style="margin: auto">
                                        @Rooms.FirstOrDefault(x => x.Id == SavedLessons.FirstOrDefault(
                                            y => y.Id == savedLessonIdperiodId.SavedLessonId)?.RoomId)?.Number
                                    </p>
                                </div>
                            }
                        </td>
                    }
                </tr>
            }
            </tbody>
        </table>
    </div>
}

@code {
    
    /// Id of the Save that the PDF will be generated for 
    [Parameter] public string SaveId { get; set; }

    private Save Save;
    private List<SavedLessonIdperiodId> SavedLessonIdperiodIds;
    private List<SavedLesson> SavedLessons;
    private List<Period> Periods;
    private List<Lesson> Lessons;
    private List<Teacher> Teachers;
    private List<Room> Rooms;
    private string[] Days = new[] {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday"}; 

    /// Initializes properties once page has received parameters (the SaveId) 
    protected override async void OnParametersSet() {
        // Loads all necessary data from the database 
        Save = await SaveService.GetSaveAsync(long.Parse(SaveId));
        SavedLessons = await SavedLessonService.GetAllSavedLessonsAsync();
        SavedLessons = SavedLessons.Where(x => x.SaveId == Save.Id).ToList();
        Lessons = SavedLessons.Select(x => LessonService.GetLessonAsync(x.LessonId).Result).ToList();
        SavedLessonIdperiodIds = await SavedLessonIdperiodIdService.GetAllSavedLessonIdperiodIdsAsync();
        SavedLessonIdperiodIds = SavedLessonIdperiodIds.Where(x =>
            SavedLessons.Select(y => y.Id).Contains(x.SavedLessonId)).ToList();
        Periods = await PeriodService.GetAllPeriodsAsync();
        Teachers = await TeacherService.GetAllTeachersAsync();
        Rooms = await RoomService.GetAllRoomsAsync();
        // Save the page as a PDF 
        bool success = await SavePDF();
        // Return to the timetable page and set the parameter to whether the PDF was saved or not 
        NavigationManager.NavigateTo($"timetable/{success.ToString()}");
    }

    /// Returns the Period object corresponding to a specific week, day, and period combination 
    private Period GetPeriod(long week, long day, long period) {
        return Periods.FirstOrDefault(x=>x.Week == week && x.Day == day && x.TimePeriod == period);
    }
    
    /// Saves the page as a PDF 
    private async Task<bool> SavePDF() {
        bool success = false;
        // Electron is required for this process 
        if (HybridSupport.IsElectronActive) {
            // Gets the current application window object 
            BrowserWindow mainWindow = Electron.WindowManager.BrowserWindows.First();
            var saveOptions = new SaveDialogOptions {
                Title = "Save a PDF-File",
                DefaultPath = await Electron.App.GetPathAsync(PathName.Documents),
                Filters = new FileFilter[] {
                    new FileFilter { Name = "PDF", Extensions = new string[] { "pdf" } }
                }
            };
            // Display native save file dialogue with the above options and await user response 
            var path = await Electron.Dialog.ShowSaveDialogAsync(mainWindow, saveOptions);
            // Ensure the file extension is ".pdf" 
            path += path.Length <= 4 || path[^4..] != ".pdf" ? ".pdf" : "";
            // If the path was not originally blank and PDF generated successfully, open the PDF in the user's default application 
            if (path != ".pdf" && await mainWindow.WebContents.PrintToPDFAsync(path, new PrintToPDFOptions {
                Landscape = false,
                PageSize = "A4",
                PrintBackground = true})) { 
                await Electron.Shell.OpenExternalAsync("file://" + path);
                success = true;
            }
        }
        return success;
    }
}
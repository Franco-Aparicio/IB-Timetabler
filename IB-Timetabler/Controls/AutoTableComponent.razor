@using System.Reflection
@typeparam TItem

@* @if (memberInfo is {Length: > 0 }) { *@
     <div style="overflow-x: auto">
        <table class="table is-bordered is-striped is-hoverable" style="width: 100%">
            <thead>
            <tr class="has-text-centered">
                @foreach (var head in Headers) {
                    <th>
                        @head
                    </th>
                }
            </tr>
            </thead>
            <tbody>
            @foreach (var item in this.Items) {
                <p style="display: none">@(first = true)</p><p style="display: none"></p>
                <tr class="has-text-centered">
                    @foreach (var member in memberInfo) {
                        @if (member.MemberType == MemberTypes.Property &&
                             !columnsToExclude.Contains(member.Name.ToLower())) {
                            @if (LinkFirst != "" && first) {
                                <td>
                                    <p style="display: none">@(first = false)</p>
                                    <a href="@($"{LinkRoot}/{@item.GetType().GetProperty(LinkToProp).GetValue(item)}")">@item.GetType().GetProperty(member.Name).GetValue(item)</a>
                                </td>
                            }
                            else {
                                <td>
                                    @item.GetType().GetProperty(member.Name).GetValue(item)
                                </td>
                            }
                        }
                    }
                </tr>
            }
            </tbody>
        </table>
    </div>

@code {

    MemberInfo[] memberInfo;
    string[] columnsToExclude;
    bool first;
    string LinkToProp;
    string LinkRoot;

    protected override void OnParametersSet() {
        base.OnParametersSet();
        if (Items is {Count: > 0 }) {
            Type typeofItem = this.Items[0].GetType();
            memberInfo = typeofItem.GetMembers();
            columnsToExclude = ColumnsToExcludeCSV.Split(',').Select(x => x.Trim().ToLower()).ToArray();
            if (LinkFirst != "") {
                first = true;
                LinkRoot = LinkFirst.Split('/').First(x=>x != "");
                LinkToProp = LinkFirst.Split('/').Last();
            }
        }
    }

    [Parameter]
    public List<string> Headers { get; set; }
    [Parameter]
    public List<TItem> Items { get; set; }
    [Parameter]
    public string ColumnsToExcludeCSV { get; set; }
    [Parameter]
    public string LinkFirst { get; set; }
    
}
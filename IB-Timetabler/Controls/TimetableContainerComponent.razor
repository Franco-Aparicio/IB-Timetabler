@inject SaveBannerService SaveBannerService

@for (int week = 0; week < 2; week++) {
    <div class="timetable">
        <h3>Week @(week == 0 ? "A" : "B")</h3>

        <table class="table is-bordered">
            <thead>
            <tr class="has-text-centered">
                <th style="cursor: auto">Period</th>
                @foreach (var day in Days) {
                    <th style="cursor: auto">
                        @day
                    </th>
                }
            </tr>
            </thead>
            <tbody>
            @for (long periodNum = 1; periodNum <= Periods.Where(x=>x.Week == week)
                .Max(x=>x.TimePeriod); periodNum++) {
                <tr>
                    <td class="has-text-centered" style="vertical-align: middle">@periodNum.ToString()</td>
                    @for (int day = 0; day < 5; day++) {
                        var period = GetPeriod(week, day, periodNum);
                        <td class="@(period == HoveredPeriod ? "period-dropzone" : null)"
                            ondragover="event.preventDefault();"
                            ondragstart="event.dataTransfer.setData('', event.target.id);"
                            @ondrop="() => HandleDrop(period)">
                            @foreach (var savedLessonIdperiodId in SavedLessonIdperiodIds.Where(x => x.PeriodId == period.Id)) {
                                <TimetableLessonComponent Container="this" SavedLessonIdperiodId="savedLessonIdperiodId"/>
                            }
                        </td>
                    }
                </tr>
            }
            </tbody>
        </table>
    </div>
}

@code {
    
    [Parameter]
    public List<SavedLessonIdperiodId> SavedLessonIdperiodIds { get; set; }
    [Parameter]
    public List<SavedLesson> SavedLessons { get; set; }
    [Parameter]
    public List<Period> Periods { get; set; }
    [Parameter]
    public List<Lesson> Lessons { get; set; }
    [Parameter]
    public List<Teacher> Teachers { get; set; }
    [Parameter]
    public List<Room> Rooms { get; set; }
    [Parameter]
    public EventCallback<List<dynamic>> Update { get; set; }
    private Period HoveredPeriod = null;
    public SavedLessonIdperiodId Payload { get; set; }
    private string[] Days = new[] {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday"}; 

    private async Task HandleDrop(Period droppedPeriod) {
        HoveredPeriod = null;
        if (droppedPeriod.Id == Payload.PeriodId) return;
        if (SavedLessonIdperiodIds.Where(x => x.PeriodId == droppedPeriod.Id).Any(
                x => x.SavedLessonId == Payload.SavedLessonId)) {
            SaveBannerService.ShowBanner("A lesson cannot be scheduled at the same time " +
                                         "as another period of the same lesson!", SaveBannerType.Error);
            return;
        }
        await UpdateTimetableAsync(new [] {droppedPeriod.Id});
    }

    private void HandleDragEnter(Period period) {
        if (period.Id == Payload.PeriodId) return;
        HoveredPeriod = period;
        StateHasChanged();
    }

    private void HandleDragLeave() {
        HoveredPeriod = null;
        StateHasChanged();
    }

    private Period GetPeriod(long week, long day, long period) {
        return Periods.FirstOrDefault(x=>x.Week == week && x.Day == day && x.TimePeriod == period);
    }
    
    public async Task UpdateTimetableAsync(long[] update) {
        if (update[0] == 0) {
            await Update.InvokeAsync(SavedLessons.Where(x=>x.Id == update[1]).Select(
                x=>(dynamic) x).ToList());
            return;
        } 
        var changed = SavedLessonIdperiodIds.SingleOrDefault(x =>
            x.SavedLessonId == Payload.SavedLessonId && x.PeriodId == Payload.PeriodId);
        if (changed is null) return;
        SavedLessonIdperiodIds.Remove(changed);
        SavedLessonIdperiodId newSavedLessonIdperiodId = new SavedLessonIdperiodId {
            SavedLessonId = Payload.SavedLessonId, PeriodId = update[0]};
        SavedLessonIdperiodIds.Add(newSavedLessonIdperiodId);
        await Update.InvokeAsync(new List<dynamic> {changed, newSavedLessonIdperiodId});
    }
}
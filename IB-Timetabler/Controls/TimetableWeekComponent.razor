<div class="timetable-week">
    <h3>Week @(Week == 0 ? "A" : "B")</h3>
    
    <table>
        <thead>
        <tr>
            @foreach (var day in Days) {
                <th>
                    @day;
                </th>
            }
        </tr>
        </thead>
        <tbody>
        <tr>
            <CascadingValue Value="this">
                @ChildContent
            </CascadingValue>
        </tr>
        </tbody>
    </table>
</div>

@code {
    
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    [Parameter]
    public List<SavedLessonIdperiodId> SavedLessonIdperiodIds { get; set; }
    [Parameter]
    public EventCallback<SavedLessonIdperiodId[]> Update { get; set; }
    [Parameter]
    public long Week { get; set; }
    public SavedLessonIdperiodId Payload { get; set; }
    private string[] Days = new[] {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday"};
    
    public async Task UpdateTimetableAsync(long newPeriodId) {
        var changed = SavedLessonIdperiodIds.SingleOrDefault(x =>
            x.SavedLessonId == Payload.SavedLessonId && x.PeriodId == Payload.PeriodId);
        if (changed is null) return;
        SavedLessonIdperiodIds.Remove(changed);
        SavedLessonIdperiodIds.Add(new SavedLessonIdperiodId {
            SavedLessonId = Payload.SavedLessonId,
            PeriodId = newPeriodId});
        await Update.InvokeAsync(new [] {changed, Payload});
    }
}
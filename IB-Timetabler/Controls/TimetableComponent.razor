@inject SavedLessonIdperiodIdService SavedLessonIdperiodIdService

<div class="timetable-component">
    <CascadingValue Value="this">
        @ChildContent
    </CascadingValue>
</div>

@code {
    [Parameter]
    public List<SavedLessonIdperiodId> SavedLessonIdperiodIds { get; set; }
    [Parameter]
    public List<Period> Periods { get; set; }
    [Parameter]
    public List<Lesson> Lessons { get; set; }
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    [Parameter]
    public EventCallback<SavedLessonIdperiodId> OnUpdated { get; set; }
    
    public SavedLessonIdperiodId Payload { get; set; }

    public async Task UpdateTimetableAsync(long newPeriodId) {
        var changed = SavedLessonIdperiodIds.SingleOrDefault(x =>
            x.SavedLessonId == Payload.SavedLessonId && x.PeriodId == Payload.PeriodId);
        if (changed is null) return;
        SavedLessonIdperiodIds.Remove(changed);
        SavedLessonIdperiodIds.Add(new SavedLessonIdperiodId {
            SavedLessonId = Payload.SavedLessonId,
            PeriodId = newPeriodId});
        await OnUpdated.InvokeAsync(Payload);
    }
}
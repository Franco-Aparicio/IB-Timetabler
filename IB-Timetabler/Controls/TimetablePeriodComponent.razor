@inject PeriodService PeriodService

<td class="period-dropzone @DropClass"
            @ondragover:preventDefault="true"
            ondragstart="Event.dataTransfer.setData('', EventTarget.id);"
            @ondrop="HandleDrop"
            @ondragenter="HandleDragEnter"
            @ondragleave="HandleDragLeave">
    @foreach (var savedLessonIdperiodId in SavedLessonIdperiodIds) {
        <TimetableLessonComponent SavedLessonIdperiodId="savedLessonIdperiodId"/>
    }
</td>

@code {
    
    [CascadingParameter]
    public TimetableDayComponent DayContainer { get; set; }
    [Parameter]
    public long PeriodNum { get; set; }
    List<SavedLessonIdperiodId> SavedLessonIdperiodIds = new List<SavedLessonIdperiodId>();
    string DropClass = "";

    protected override void OnParametersSet() {
        SavedLessonIdperiodIds.Clear();
        SavedLessonIdperiodIds.AddRange(DayContainer.SavedLessonIdperiodIds.Where(
            x=>PeriodService.GetPeriodByIdAsync(x.PeriodId).Result.TimePeriod == PeriodNum));
    }

   private void HandleDragEnter() {
       if (PeriodNum == DayContainer.WeekContainer.Payload.PeriodId) return;
       if (DayContainer.WeekContainer.Week != PeriodService.GetPeriodByIdAsync(DayContainer.WeekContainer.
           Payload.PeriodId).Result.Week)
           DropClass = "no-drop";
       else
           DropClass = "can-drop";
    }

    private void HandleDragLeave() {
        DropClass = "";
    }

    private async Task HandleDrop() {
        DropClass = "";
        await DayContainer.WeekContainer.UpdateTimetableAsync(PeriodService.GetPeriodAsync(DayContainer.WeekContainer.Week,
            DayContainer.Day, PeriodNum).Id);
    }

}